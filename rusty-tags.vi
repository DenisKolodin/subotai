!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
AES_BLOCK_SIZE	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^const AES_BLOCK_SIZE: usize = 16;$/;"	c
ALPHA_DIV_TABLE	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^const ALPHA_DIV_TABLE : [u32; 256] =$/;"	c
ALPHA_MUL_TABLE	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^const ALPHA_MUL_TABLE : [u32; 256] =$/;"	c
Add for Fe	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add for Fe {$/;"	i
Add for GeP3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add<GeCached> for GeP3 {$/;"	i
Add for GeP3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Add<GePrecomp> for GeP3 {$/;"	i
Add for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl Add for u32x4 {$/;"	i
Add for u64x2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl Add for u64x2 {$/;"	i
AeadDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aead.rs	/^pub trait AeadDecryptor {$/;"	t
AeadDecryptor for AesGcm	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AeadDecryptor for AesGcm<'static> {$/;"	i
AeadDecryptor for ChaCha20Poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl AeadDecryptor for ChaCha20Poly1305 {$/;"	i
AeadEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aead.rs	/^pub trait AeadEncryptor {$/;"	t
AeadEncryptor for AesGcm	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AeadEncryptor for AesGcm<'static> {$/;"	i
AeadEncryptor for ChaCha20Poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl AeadEncryptor for ChaCha20Poly1305 {$/;"	i
AesBitValueOps	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^trait AesBitValueOps: BitXor<Output = Self> + BitAnd<Output = Self> + Not<Output = Self> + Default + Sized {$/;"	t
AesBitValueOps for u16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl AesBitValueOps for u16 {$/;"	i
AesBitValueOps for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl AesBitValueOps for u32x4 {$/;"	i
AesGcm	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^impl<'a> AesGcm<'a> {$/;"	i
AesGcm	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^pub struct AesGcm<'a> {$/;"	s
AesNiDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^impl AesNiDecryptor {$/;"	i
AesNiDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^pub struct AesNiDecryptor {$/;"	s
AesNiEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^impl AesNiEncryptor {$/;"	i
AesNiEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^pub struct AesNiEncryptor {$/;"	s
AesOps	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^trait AesOps {$/;"	t
AesOps for Bs8State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: AesBitValueOps + Copy + 'static> AesOps for Bs8State<T> {$/;"	i
AppendTuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^        impl<$A, $($B,)* T> AppendTuple<T> for ($A, $($B),*) {$/;"	i
AppendTuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^        impl<T> AppendTuple<T> for () {$/;"	i
AppendTuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^pub trait AppendTuple<X> {$/;"	t
B	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^const B: usize = 200;$/;"	c
BI	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^static BI: [GePrecomp; 8] = [$/;"	c
BLAKE2B_BLOCKBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^const BLAKE2B_BLOCKBYTES : usize = 128;$/;"	c
BLAKE2B_KEYBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^const BLAKE2B_KEYBYTES : usize = 64;$/;"	c
BLAKE2B_OUTBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^const BLAKE2B_OUTBYTES : usize = 64;$/;"	c
BLAKE2B_PERSONALBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^const BLAKE2B_PERSONALBYTES : usize = 16;$/;"	c
BLAKE2B_SALTBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^const BLAKE2B_SALTBYTES : usize = 16;$/;"	c
BLAKE2S_BLOCKBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^const BLAKE2S_BLOCKBYTES : usize = 64;$/;"	c
BLAKE2S_KEYBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^const BLAKE2S_KEYBYTES : usize = 32;$/;"	c
BLAKE2S_OUTBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^const BLAKE2S_OUTBYTES : usize = 32;$/;"	c
BLAKE2S_PERSONALBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^const BLAKE2S_PERSONALBYTES : usize = 8;$/;"	c
BLAKE2S_SALTBYTES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^const BLAKE2S_SALTBYTES : usize = 8;$/;"	c
BLOCK_LEN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^const BLOCK_LEN: usize = 16;$/;"	c
BLOCK_LEN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^const BLOCK_LEN: usize = 16;$/;"	c
BUCKET_DEPTH	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^const BUCKET_DEPTH : usize = 20;$/;"	c
Batching	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<F, I> Batching<I, F> {$/;"	i
Batching	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Batching<I, F> {$/;"	s
BitAnd for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl BitAnd for u32x4 {$/;"	i
BitOr for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl BitOr for u32x4 {$/;"	i
BitXor for Gf128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^impl BitXor for Gf128 {$/;"	i
BitXor for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl BitXor for u32x4 {$/;"	i
Blake2b	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^impl Blake2b {$/;"	i
Blake2b	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^pub struct Blake2b {$/;"	s
Blake2bParam	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^struct Blake2bParam {$/;"	s
Blake2s	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^impl Blake2s {$/;"	i
Blake2s	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^pub struct Blake2s {$/;"	s
Blake2sParam	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^struct Blake2sParam {$/;"	s
BlockDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^        impl BlockDecryptor for $name {$/;"	i
BlockDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockDecryptor {$/;"	t
BlockDecryptor for AesNiDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^impl BlockDecryptor for AesNiDecryptor {$/;"	i
BlockDecryptor for Blowfish	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^impl BlockDecryptor for Blowfish {$/;"	i
BlockDecryptorX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^        impl BlockDecryptorX8 for $name {$/;"	i
BlockDecryptorX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockDecryptorX8 {$/;"	t
BlockEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^        impl BlockEncryptor for $name {$/;"	i
BlockEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockEncryptor {$/;"	t
BlockEncryptor for AesNiEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^impl BlockEncryptor for AesNiEncryptor {$/;"	i
BlockEncryptor for Blowfish	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^impl BlockEncryptor for Blowfish {$/;"	i
BlockEncryptorX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^        impl BlockEncryptorX8 for $name {$/;"	i
BlockEncryptorX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait BlockEncryptorX8 {$/;"	t
BlockEngine	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <P: BlockProcessor, X: PaddingProcessor> BlockEngine<P, X> {$/;"	i
BlockEngine	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^struct BlockEngine<P, X> {$/;"	s
BlockEngineState	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^enum BlockEngineState {$/;"	g
BlockModeSpec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/api.rs	/^enum BlockModeSpec {$/;"	g
BlockProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^trait BlockProcessor {$/;"	t
BlockProcessor for CbcDecryptorProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor> BlockProcessor for CbcDecryptorProcessor<T> {$/;"	i
BlockProcessor for CbcEncryptorProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor> BlockProcessor for CbcEncryptorProcessor<T> {$/;"	i
BlockProcessor for EcbDecryptorProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor> BlockProcessor for EcbDecryptorProcessor<T> {$/;"	i
BlockProcessor for EcbEncryptorProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor> BlockProcessor for EcbEncryptorProcessor<T> {$/;"	i
BlodeModePaddingSpec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/api.rs	/^enum BlodeModePaddingSpec {$/;"	g
Blowfish	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^impl Blowfish {$/;"	i
Blowfish	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^pub struct Blowfish {$/;"	s
BorrowedWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> BorrowedWriteBuffer<'a> {$/;"	i
BorrowedWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^pub struct BorrowedWriteBuffer<'a> {$/;"	s
Bs2State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T> Bs2State<T> {$/;"	i
Bs2State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs2State<T>(T, T);$/;"	s
Bs4State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Copy> Bs4State<T> {$/;"	i
Bs4State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs4State<T>(T, T, T, T);$/;"	s
Bs8State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl <T: Copy> Bs8State<T> {$/;"	i
Bs8State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^struct Bs8State<T>(T, T, T, T, T, T, T, T);$/;"	s
Bucket	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^impl Bucket {$/;"	i
Bucket	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^struct Bucket {$/;"	s
BufferResult	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^pub enum BufferResult {$/;"	g
ByRef	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    struct ByRef<'r, I: ?Sized>(&'r mut I) where I: 'r;$/;"	s
C0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static C0: [u64; 256] = [$/;"	c
C1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^static C1: [u32; 16] = [$/;"	c
C1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static C1: [u64; 256] = [$/;"	c
C2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^static C2: [u32; 16] = [$/;"	c
C2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static C2: [u64; 256] = [$/;"	c
C3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^static C3: [u32; 16] = [$/;"	c
C3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static C3: [u64; 256] = [$/;"	c
C4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^static C4: [u32; 16] = [$/;"	c
C4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static C4: [u64; 256] = [$/;"	c
C5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static C5: [u64; 256] = [$/;"	c
C6	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static C6: [u64; 256] = [$/;"	c
C7	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static C7: [u64; 256] = [$/;"	c
CASES	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    static CASES: &'static [(&'static [u8], &'static [u8], &'static [u8], &'static [u8])] = &[$/;"	c
CTR_LEN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^const CTR_LEN: usize = 16;$/;"	c
CbcDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> CbcDecryptor<T, X> {$/;"	i
CbcDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CbcDecryptor<T, X> {$/;"	s
CbcDecryptorProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^struct CbcDecryptorProcessor<T> {$/;"	s
CbcEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> CbcEncryptor<T, X> {$/;"	i
CbcEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CbcEncryptor<T, X> {$/;"	s
CbcEncryptorProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^struct CbcEncryptorProcessor<T> {$/;"	s
CbcTest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct CbcTest {$/;"	s
ChaCha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^impl ChaCha20 {$/;"	i
ChaCha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^pub struct ChaCha20 {$/;"	s
ChaCha20Poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^impl ChaCha20Poly1305 {$/;"	i
ChaCha20Poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^pub struct ChaCha20Poly1305 {$/;"	s
ChaChaState	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^struct ChaChaState {$/;"	s
CharSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^impl<'a> CharSlices<'a>$/;"	i
CharSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^struct CharSlices<'a> {$/;"	s
Chunk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^pub struct Chunk<'a, I: 'a>$/;"	s
ChunkIndex	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl ChunkIndex {$/;"	i
ChunkIndex	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^struct ChunkIndex {$/;"	s
Chunks	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^pub struct Chunks<'a, I: 'a>$/;"	s
ChunksLazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<I> ChunksLazy<I>$/;"	i
ChunksLazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^pub struct ChunksLazy<I>$/;"	s
CipherTest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    trait CipherTest {$/;"	t
CipherTest for CbcTest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for CbcTest {$/;"	i
CipherTest for CtrTest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for CtrTest {$/;"	i
CipherTest for EcbTest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    impl CipherTest for EcbTest {$/;"	i
Clone for AesNiDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiDecryptor { fn clone(&self) -> AesNiDecryptor { *self } }$/;"	i
Clone for AesNiEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^impl Clone for AesNiEncryptor { fn clone(&self) -> AesNiEncryptor { *self } }$/;"	i
Clone for Blake2b	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^impl Clone for Blake2b { fn clone(&self) -> Blake2b { *self } }$/;"	i
Clone for Blake2s	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^impl Clone for Blake2s { fn clone(&self) -> Blake2s { *self } }$/;"	i
Clone for ChaCha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^impl Clone for ChaCha20 { fn clone(&self) -> ChaCha20 { *self } }$/;"	i
Clone for Coalesce	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I: Clone, F: Clone> Clone for Coalesce<I, F>$/;"	i
Clone for Dedup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I: Clone> Clone for Dedup<I>$/;"	i
Clone for FixedBuffer128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer128 { fn clone(&self) -> FixedBuffer128 { *self } }$/;"	i
Clone for FixedBuffer64	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl Clone for FixedBuffer64 { fn clone(&self) -> FixedBuffer64 { *self } }$/;"	i
Clone for Flatten	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Clone for Flatten<I> where$/;"	i
Clone for Foo	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    impl Clone for Foo$/;"	i
Clone for Ghash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for Ghash { fn clone(&self) -> Ghash { *self } }$/;"	i
Clone for GhashWithC	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^impl Clone for GhashWithC { fn clone(&self) -> GhashWithC { *self } }$/;"	i
Clone for Hc128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^impl Clone for Hc128 { fn clone(&self) -> Hc128 { *self } }$/;"	i
Clone for HeadTail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^impl<I> Clone for HeadTail<I>$/;"	i
Clone for KMerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^impl<I> Clone for KMerge<I>$/;"	i
Clone for MendSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I: Clone> Clone for MendSlices<I>$/;"	i
Clone for Merge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> Clone for Merge<I, J>$/;"	i
Clone for MergeBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J, F> Clone for MergeBy<I, J, F>$/;"	i
Clone for MergeCore	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> Clone for MergeCore<I, J>$/;"	i
Clone for PutBackN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I: Iterator> Clone for PutBackN<I>$/;"	i
Clone for Rc4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^impl Clone for Rc4 { fn clone(&self) -> Rc4 { *self } }$/;"	i
Clone for RcIter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^impl<I> Clone for RcIter<I> {$/;"	i
Clone for Salsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^impl Clone for Salsa20 { fn clone(&self) -> Salsa20 { *self } }$/;"	i
Clone for Sha3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^impl Clone for Sha3 {$/;"	i
Clone for Sosemanuk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Clone for Sosemanuk { fn clone(&self) -> Sosemanuk { *self } }$/;"	i
Clone for Stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^impl<'a, A> Clone for Stride<'a, A> {$/;"	i
Coalesce	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, F> Coalesce<I, F>$/;"	i
Coalesce	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Coalesce<I, F>$/;"	s
CoalesceCore	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> CoalesceCore<I>$/;"	i
CoalesceCore	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct CoalesceCore<I>$/;"	s
Combinations	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Combinations<I>$/;"	i
Combinations	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Combinations<I: Iterator> {$/;"	s
CombinationsN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> CombinationsN<I>$/;"	i
CombinationsN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct CombinationsN<I: Iterator> {$/;"	s
Copy for Sha3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^impl Copy for Sha3 {$/;"	i
Copy for Stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^impl<'a, A> Copy for Stride<'a, A> {}$/;"	i
CtrMode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> CtrMode<A> {$/;"	i
CtrMode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CtrMode<A> {$/;"	s
CtrModeX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> CtrModeX8<A> {$/;"	i
CtrModeX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct CtrModeX8<A> {$/;"	s
CtrTest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    struct CtrTest {$/;"	s
CtrTest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct CtrTest {$/;"	s
CurveGen	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    impl CurveGen {$/;"	i
CurveGen	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    struct CurveGen {$/;"	s
DATA	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^static DATA: &'static str = include_str!("iris.data");$/;"	c
DIGEST_BUF_LEN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^const DIGEST_BUF_LEN: usize = 5;$/;"	c
DecPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> DecPadding<X> {$/;"	i
DecPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct DecPadding<X> {$/;"	s
Decryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait Decryptor {$/;"	t
Decryptor for Box	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl Decryptor for Box<SynchronousStreamCipher + 'static> {$/;"	i
Decryptor for CbcDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> Decryptor for CbcDecryptor<T, X> {$/;"	i
Decryptor for ChaCha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^impl Decryptor for ChaCha20 {$/;"	i
Decryptor for CtrMode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> Decryptor for CtrMode<A> {$/;"	i
Decryptor for CtrModeX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> Decryptor for CtrModeX8<A> {$/;"	i
Decryptor for EcbDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> Decryptor for EcbDecryptor<T, X> {$/;"	i
Decryptor for Hc128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^impl Decryptor for Hc128 {$/;"	i
Decryptor for Rc4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^impl Decryptor for Rc4 {$/;"	i
Decryptor for Salsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^impl Decryptor for Salsa20 {$/;"	i
Decryptor for Sosemanuk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Decryptor for Sosemanuk {$/;"	i
Dedup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Dedup<I>$/;"	i
Dedup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Dedup<I>$/;"	s
Default for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl Default for u32x4 {$/;"	i
Diff	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/diff.rs	/^pub enum Diff<I, J>$/;"	g
Digest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^pub trait Digest {$/;"	t
Digest for Blake2b	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^impl Digest for Blake2b {$/;"	i
Digest for Blake2s	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^impl Digest for Blake2s {$/;"	i
Digest for Md5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^impl Digest for Md5 {$/;"	i
Digest for Ripemd160	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^impl Digest for Ripemd160 {$/;"	i
Digest for Sha1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^impl Digest for Sha1 {$/;"	i
Digest for Sha224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha224 {$/;"	i
Digest for Sha256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha256 {$/;"	i
Digest for Sha3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^impl Digest for Sha3 {$/;"	i
Digest for Sha384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha384 {$/;"	i
Digest for Sha512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512 {$/;"	i
Digest for Sha512Trunc224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512Trunc224 {$/;"	i
Digest for Sha512Trunc256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Digest for Sha512Trunc256 {$/;"	i
Digest for Whirlpool	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^impl Digest for Whirlpool {$/;"	i
DigestSpec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/api.rs	/^enum DigestSpec {$/;"	g
DoubleEndedIterator	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^        impl<'a, A> DoubleEndedIterator for $name<'a, A>$/;"	i
DoubleEndedIterator for FlatTuples	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl<X, T, I> DoubleEndedIterator for FlatTuples<I>$/;"	i
DoubleEndedIterator for Flatten	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> DoubleEndedIterator for Flatten<I>$/;"	i
DoubleEndedIterator for Iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^impl<T> DoubleEndedIterator for Iter<T> where Range<T>: DoubleEndedIterator,$/;"	i
DoubleEndedIterator for Linspace	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^impl<F> DoubleEndedIterator for Linspace<F>$/;"	i
DoubleEndedIterator for PadUsing	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^impl<I, F> DoubleEndedIterator for PadUsing<I, F>$/;"	i
DoubleEndedIterator for RcIter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^impl<I> DoubleEndedIterator for RcIter<I>$/;"	i
DoubleEndedIterator for RepeatCall	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^impl<A, F> DoubleEndedIterator for RepeatCall<F>$/;"	i
DoubleEndedIterator for RepeatN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^impl<A> DoubleEndedIterator for RepeatN<A>$/;"	i
DoubleEndedIterator for ZipLongest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^impl<T, U> DoubleEndedIterator for ZipLongest<T, U>$/;"	i
DoubleEndedIterator for ZipSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^impl<T, U> DoubleEndedIterator for ZipSlices<T, U>$/;"	i
Drop for Chunk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, I> Drop for Chunk<'a, I>$/;"	i
Drop for Group	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, K, I, F> Drop for Group<'a, K, I, F>$/;"	i
ERR_STR	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust PBKDF2 format.";$/;"	c
ERR_STR	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    static ERR_STR: &'static str = "Hash is not in Rust Scrypt format.";$/;"	c
EcbDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockDecryptor, X: PaddingProcessor> EcbDecryptor<T, X> {$/;"	i
EcbDecryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EcbDecryptor<T, X> {$/;"	s
EcbDecryptorProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^struct EcbDecryptorProcessor<T> {$/;"	s
EcbEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> EcbEncryptor<T, X> {$/;"	i
EcbEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EcbEncryptor<T, X> {$/;"	s
EcbEncryptorProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^struct EcbEncryptorProcessor<T> {$/;"	s
EcbTest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    struct EcbTest {$/;"	s
EitherOrBoth	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^pub enum EitherOrBoth<A, B> {$/;"	g
EncPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> EncPadding<X> {$/;"	i
EncPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct EncPadding<X> {$/;"	s
Encryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait Encryptor {$/;"	t
Encryptor for Box	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl Encryptor for Box<SynchronousStreamCipher + 'static> {$/;"	i
Encryptor for CbcEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> Encryptor for CbcEncryptor<T, X> {$/;"	i
Encryptor for ChaCha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^impl Encryptor for ChaCha20 {$/;"	i
Encryptor for CtrMode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> Encryptor for CtrMode<A> {$/;"	i
Encryptor for CtrModeX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> Encryptor for CtrModeX8<A> {$/;"	i
Encryptor for EcbEncryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <T: BlockEncryptor, X: PaddingProcessor> Encryptor for EcbEncryptor<T, X> {$/;"	i
Encryptor for Hc128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^impl Encryptor for Hc128 {$/;"	i
Encryptor for Rc4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^impl Encryptor for Rc4 {$/;"	i
Encryptor for Salsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^impl Encryptor for Salsa20 {$/;"	i
Encryptor for Sosemanuk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Encryptor for Sosemanuk {$/;"	i
Engine256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine256 {$/;"	i
Engine256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine256 {$/;"	s
Engine256State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine256State {$/;"	i
Engine256State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine256State {$/;"	s
Engine512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine512 {$/;"	i
Engine512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine512 {$/;"	s
Engine512State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Engine512State {$/;"	i
Engine512State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^struct Engine512State {$/;"	s
EnumerateFrom	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<K, I> EnumerateFrom<I, K>$/;"	i
EnumerateFrom	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct EnumerateFrom<I, K> {$/;"	s
Eq for Fe	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Eq for Fe { }$/;"	i
Eq for HeadTail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^impl<I> Eq for HeadTail<I>$/;"	i
Eq for MacResult	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^impl Eq for MacResult { }$/;"	i
Err	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^    type Err = ParseError;$/;"	T
ExactSizeIterator	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^        impl<'a, A> ExactSizeIterator for $name<'a, A> { }$/;"	i
ExactSizeIterator for EnumerateFrom	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<K, I> ExactSizeIterator for EnumerateFrom<I, K>$/;"	i
ExactSizeIterator for ISlice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/islice.rs	/^impl<I> ExactSizeIterator for ISlice<I>$/;"	i
ExactSizeIterator for Iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^impl<T> ExactSizeIterator for Iter<T> where Range<T>: ExactSizeIterator,$/;"	i
ExactSizeIterator for Linspace	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^impl<F> ExactSizeIterator for Linspace<F>$/;"	i
ExactSizeIterator for MultiPeek	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> ExactSizeIterator for MultiPeek<I>$/;"	i
ExactSizeIterator for PadUsing	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^impl<I, F> ExactSizeIterator for PadUsing<I, F>$/;"	i
ExactSizeIterator for RepeatN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^impl<A> ExactSizeIterator for RepeatN<A>$/;"	i
ExactSizeIterator for Step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> ExactSizeIterator for Step<I>$/;"	i
ExactSizeIterator for Tee	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/tee.rs	/^impl<I> ExactSizeIterator for Tee<I>$/;"	i
ExactSizeIterator for Zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^        impl<$($B),*> ExactSizeIterator for Zip<($($B,)*)> where$/;"	i
ExactSizeIterator for ZipEq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_eq.rs	/^impl<I, J> ExactSizeIterator for ZipEq<I, J>$/;"	i
ExactSizeIterator for ZipLongest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^impl<T, U> ExactSizeIterator for ZipLongest<T, U>$/;"	i
ExactSizeIterator for ZipSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^impl<T, U> ExactSizeIterator for ZipSlices<T, U>$/;"	i
ExactSizeIterator for ZipTrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^        impl<$($B),*> ExactSizeIterator for ZipTrusted<($($B,)*)>$/;"	i
FE_D	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_D : Fe = Fe([-10913610,13857413,-15372611,6949391,114729,-8787816,-6275908,-3247719,-18696448,-12055116]);$/;"	c
FE_D2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_D2 : Fe = Fe([-21827239,-5839606,-30745221,13898782,229458,15978800,-12551817,-6495438,29715968,9444199]);$/;"	c
FE_ONE	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_ONE : Fe = Fe([1,0,0,0,0,0,0,0,0,0]);$/;"	c
FE_SQRTM1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_SQRTM1 : Fe = Fe([-32595792,-7943725,9377950,3500415,12389472,-272473,-25146209,-2005654,326686,11406482]);$/;"	c
FE_ZERO	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^static FE_ZERO : Fe = Fe([0,0,0,0,0,0,0,0,0,0]);$/;"	c
Fe	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Fe {$/;"	i
Fe	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct Fe(pub [i32; 10]);$/;"	s
FixedBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    impl FixedBuffer for $name {$/;"	i
FixedBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait FixedBuffer {$/;"	t
FixedBuffer128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl FixedBuffer128 {$/;"	i
FixedBuffer128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub struct FixedBuffer128 {$/;"	s
FixedBuffer64	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl FixedBuffer64 {$/;"	i
FixedBuffer64	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub struct FixedBuffer64 {$/;"	s
FlatTuples	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl<I> FlatTuples<I> {$/;"	i
FlatTuples	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^pub struct FlatTuples<I> {$/;"	s
Flatten	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Flatten<I>$/;"	i
Flatten	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Flatten<I>$/;"	s
FoldWhile	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub enum FoldWhile<T> {$/;"	g
Foo	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    struct Foo {$/;"	s
Format	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^pub struct Format<'a, I, F> {$/;"	s
FormatDefault	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^impl<'a, I> FormatDefault<'a, I>$/;"	i
FormatDefault	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^pub struct FormatDefault<'a, I> {$/;"	s
Fortuna	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^impl Fortuna {$/;"	i
Fortuna	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^pub struct Fortuna {$/;"	s
FortunaGenerator	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^impl FortunaGenerator {$/;"	i
FortunaGenerator	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^struct FortunaGenerator {$/;"	s
From for ParseError	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^impl From<ParseFloatError> for ParseError {$/;"	i
FromStr for Iris	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^impl FromStr for Iris {$/;"	i
G	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^macro_rules! G( ($r:expr, $i:expr, $a:expr, $b:expr, $c:expr, $d:expr, $m:expr) => ({$/;"	d
G	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^macro_rules! G( ($r:expr, $i:expr, $a:expr, $b:expr, $c:expr, $d:expr, $m:expr) => ({$/;"	d
GE_PRECOMP_BASE	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^static GE_PRECOMP_BASE : [[GePrecomp; 8]; 32] = [$/;"	c
GeCached	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeCached {$/;"	s
GeP1P1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP1P1 {$/;"	i
GeP1P1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP1P1 {$/;"	s
GeP2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP2 {$/;"	i
GeP2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP2 {$/;"	s
GeP3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl GeP3 {$/;"	i
GeP3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GeP3 {$/;"	s
GePrecomp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl GePrecomp {$/;"	i
GePrecomp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub struct GePrecomp {$/;"	s
GenericRange	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^pub trait GenericRange {$/;"	t
GenericRange for Range	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl GenericRange for Range<usize> {$/;"	i
GenericRange for RangeFrom	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl GenericRange for RangeFrom<usize> {$/;"	i
GenericRange for RangeFull	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl GenericRange for RangeFull {}$/;"	i
GenericRange for RangeTo	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl GenericRange for RangeTo<usize> {$/;"	i
Gf128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^impl Gf128 {$/;"	i
Gf128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^struct Gf128 { d: simd::u32x4 }$/;"	s
Gf2Ops	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf2Ops {$/;"	t
Gf4Ops	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf4Ops {$/;"	t
Gf8Ops	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^trait Gf8Ops {$/;"	t
Ghash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^impl Ghash {$/;"	i
Ghash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^pub struct Ghash {$/;"	s
GhashWithC	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^impl GhashWithC {$/;"	i
GhashWithC	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^pub struct GhashWithC {$/;"	s
Group	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^pub struct Group<'a, K: 'a, I: 'a, F: 'a>$/;"	s
GroupBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<K, F, I> GroupBy<K, I, F>$/;"	i
GroupBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct GroupBy<K, I, F>$/;"	s
GroupByLazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<K, I, F> GroupByLazy<K, I, F>$/;"	i
GroupByLazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^pub struct GroupByLazy<K, I, F>$/;"	s
GroupInner	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<K, I, F> GroupInner<K, I, F>$/;"	i
GroupInner	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^struct GroupInner<K, I, F>$/;"	s
Groups	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^pub struct Groups<'a, K: 'a, I: 'a, F: 'a>$/;"	s
H224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^static H224: [u32; STATE_LEN] = [$/;"	c
H256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^static H256: [u32; STATE_LEN] = [$/;"	c
H384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^static H384: [u64; STATE_LEN] = [$/;"	c
H512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^static H512: [u64; STATE_LEN] = [$/;"	c
H512_TRUNC_224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^static H512_TRUNC_224: [u64; STATE_LEN] = [$/;"	c
H512_TRUNC_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^static H512_TRUNC_256: [u64; STATE_LEN] = [$/;"	c
Hc128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^impl Hc128 {$/;"	i
Hc128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^pub struct Hc128 {$/;"	s
HeadTail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^impl<I> HeadTail<I>$/;"	i
HeadTail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^struct HeadTail<I>$/;"	s
Hmac	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^impl <D: Digest> Hmac<D> {$/;"	i
Hmac	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^pub struct Hmac<D> {$/;"	s
ISlice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/islice.rs	/^impl<I> ISlice<I>$/;"	i
ISlice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/islice.rs	/^pub struct ISlice<I> {$/;"	s
IV	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^static IV : [u64; 8] = [$/;"	c
IV	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^static IV : [u32; 8] = [$/;"	c
Index	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^        impl<'a, A> Index<usize> for $name<'a, A>$/;"	i
Index for LazyBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Index<usize> for LazyBuffer<I>$/;"	i
IndexMut for StrideMut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^impl<'a, A> IndexMut<usize> for StrideMut<'a, A> {$/;"	i
Interleave	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> Interleave<I, J>$/;"	i
Interleave	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Interleave<I, J> {$/;"	s
InterleaveShortest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> InterleaveShortest<I, J>$/;"	i
InterleaveShortest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct InterleaveShortest<I, J>$/;"	s
Intersperse	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/intersperse.rs	/^impl<I> Intersperse<I>$/;"	i
Intersperse	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/intersperse.rs	/^pub struct Intersperse<I>$/;"	s
IntoIter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    type IntoIter = Chunks<'a, I>;$/;"	T
IntoIter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    type IntoIter = Groups<'a, K, I, F>;$/;"	T
IntoIter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    type IntoIter = RcIter<I>;$/;"	T
IntoIterator	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, I> IntoIterator for &'a ChunksLazy<I>$/;"	i
IntoIterator	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, K, I, F> IntoIterator for &'a GroupByLazy<K, I, F>$/;"	i
IntoIterator	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^impl<'a, I> IntoIterator for &'a RcIter<I>$/;"	i
IntoIteratorTuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^pub trait IntoIteratorTuple$/;"	t
IntoIteratorTuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^        impl<$($B: IntoIterator),*> IntoIteratorTuple for ($($B,)*)$/;"	i
Iris	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^struct Iris {$/;"	s
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = (I::Item, I::Item);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = (I::Item, J::Item);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = (K, I::Item);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = (K, Vec<I::Item>);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = <I::Item as IntoIterator>::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = A;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = B;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = I::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Item = Vec<I::Item>;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    type Item = (K, Group<'a, K, I, F>);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    type Item = Chunk<'a, I>;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    type Item = I::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/intersperse.rs	/^    type Item = I::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/islice.rs	/^    type Item = I::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    type Item = I::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^    type Item = F;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    type Item = &'a T;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    type Item = &'a mut T;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    type Item = T::Result;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    type Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^    type Item = I::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    type Item = A;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    type Item = I::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^    type Item = A;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^    type Item = A;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            type Item = $elem;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/tee.rs	/^    type Item = I::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_eq.rs	/^    type Item = (I::Item, J::Item);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^    type Item = EitherOrBoth<T::Item, U::Item>;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^    type Item = (T::Item, U::Item);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^            type Item = ($($B::Item,)*);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^            type Item = ($($B::Item,)*);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    type Item = <Range<T> as Iterator>::Item;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^        type Item = X;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    type Item = (usize, &'a str);$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^        type Item = Fe;$/;"	T
Item	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/step_by.rs	/^    type Item = T;$/;"	T
Iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^impl<T> Iter<T>$/;"	i
Iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^struct Iter<T>(Range<T>, i32); \/\/ with fuse\/done flag$/;"	s
Iterator	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^        impl<'a, A> Iterator for $name<'a, A>$/;"	i
Iterator for Batching	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<B, F, I> Iterator for Batching<I, F>$/;"	i
Iterator for ByRef	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    impl<'r, X, I: ?Sized> Iterator for ByRef<'r, I> where$/;"	i
Iterator for CharSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^impl<'a> Iterator for CharSlices<'a>$/;"	i
Iterator for Chunk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, I> Iterator for Chunk<'a, I>$/;"	i
Iterator for Chunks	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, I> Iterator for Chunks<'a, I>$/;"	i
Iterator for Coalesce	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, F> Iterator for Coalesce<I, F>$/;"	i
Iterator for Combinations	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for Combinations<I>$/;"	i
Iterator for CombinationsN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for CombinationsN<I>$/;"	i
Iterator for CurveGen	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    impl Iterator for CurveGen {$/;"	i
Iterator for Dedup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for Dedup<I>$/;"	i
Iterator for EnumerateFrom	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<K, I> Iterator for EnumerateFrom<I, K>$/;"	i
Iterator for FlatTuples	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl<X, T, I> Iterator for FlatTuples<I>$/;"	i
Iterator for Flatten	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for Flatten<I>$/;"	i
Iterator for Group	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, K, I, F> Iterator for Group<'a, K, I, F>$/;"	i
Iterator for GroupBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<K, I, F> Iterator for GroupBy<K, I, F>$/;"	i
Iterator for Groups	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, K, I, F> Iterator for Groups<'a, K, I, F>$/;"	i
Iterator for ISlice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/islice.rs	/^impl<I> Iterator for ISlice<I>$/;"	i
Iterator for Interleave	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> Iterator for Interleave<I, J>$/;"	i
Iterator for InterleaveShortest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> Iterator for InterleaveShortest<I, J>$/;"	i
Iterator for Intersperse	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/intersperse.rs	/^impl<I> Iterator for Intersperse<I>$/;"	i
Iterator for Iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^impl<T> Iterator for Iter<T> where Range<T>: Iterator,$/;"	i
Iterator for KMerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^impl<I> Iterator for KMerge<I>$/;"	i
Iterator for Linspace	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^impl<F> Iterator for Linspace<F>$/;"	i
Iterator for MendSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for MendSlices<I>$/;"	i
Iterator for Merge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> Iterator for Merge<I, J>$/;"	i
Iterator for MergeBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J, F> Iterator for MergeBy<I, J, F>$/;"	i
Iterator for MultiPeek	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for MultiPeek<I>$/;"	i
Iterator for PadUsing	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^impl<I, F> Iterator for PadUsing<I, F>$/;"	i
Iterator for Product	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> Iterator for Product<I, J>$/;"	i
Iterator for PutBack	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for PutBack<I>$/;"	i
Iterator for PutBackN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I: Iterator> Iterator for PutBackN<I> {$/;"	i
Iterator for RcIter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^impl<A, I> Iterator for RcIter<I>$/;"	i
Iterator for RepeatCall	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^impl<A, F> Iterator for RepeatCall<F>$/;"	i
Iterator for RepeatN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^impl<A> Iterator for RepeatN<A>$/;"	i
Iterator for Step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for Step<I>$/;"	i
Iterator for StepUp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/step_by.rs	/^impl <T> Iterator for StepUp<T> where$/;"	i
Iterator for TakeWhileRef	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<'a, I, F> Iterator for TakeWhileRef<'a, I, F>$/;"	i
Iterator for Tee	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/tee.rs	/^impl<I> Iterator for Tee<I>$/;"	i
Iterator for Unfold	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^impl<A, St, F> Iterator for Unfold<St, F>$/;"	i
Iterator for Unique	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Iterator for Unique<I>$/;"	i
Iterator for UniqueBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, V, F> Iterator for UniqueBy<I, V, F>$/;"	i
Iterator for WhileSome	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, A> Iterator for WhileSome<I>$/;"	i
Iterator for Zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^        impl<$($B),*> Iterator for Zip<($($B,)*)>$/;"	i
Iterator for ZipEq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_eq.rs	/^impl<I, J> Iterator for ZipEq<I, J>$/;"	i
Iterator for ZipLongest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^impl<T, U> Iterator for ZipLongest<T, U>$/;"	i
Iterator for ZipSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^impl<T, U> Iterator for ZipSlices<T, U>$/;"	i
Iterator for ZipTrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^        impl<$($B),*> Iterator for ZipTrusted<($($B,)*)>$/;"	i
Itertools	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub trait Itertools : Iterator {$/;"	t
Itertools for T	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^impl<T: ?Sized> Itertools for T where T: Iterator { }$/;"	i
K0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^const K0: u32 = 0x5A827999u32;$/;"	c
K0V	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    const K0V: u32x4 = u32x4(K0, K0, K0, K0);$/;"	c
K1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^const K1: u32 = 0x6ED9EBA1u32;$/;"	c
K1V	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    const K1V: u32x4 = u32x4(K1, K1, K1, K1);$/;"	c
K2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^const K2: u32 = 0x8F1BBCDCu32;$/;"	c
K2V	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    const K2V: u32x4 = u32x4(K2, K2, K2, K2);$/;"	c
K3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^const K3: u32 = 0xCA62C1D6u32;$/;"	c
K32	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub const K32: [u32; 64] = [$/;"	c
K32X4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub const K32X4: [u32x4; 16] = [$/;"	c
K3V	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    const K3V: u32x4 = u32x4(K3, K3, K3, K3);$/;"	c
K64	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub const K64: [u64; 80] = [$/;"	c
K64X2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub const K64X2: [u64x2; 40] = [$/;"	c
KEY_LEN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^const KEY_LEN: usize = 32;$/;"	c
KEY_SIZE	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^pub const KEY_SIZE : usize = 160;$/;"	c
KEY_SIZE_BYTES	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^pub const KEY_SIZE_BYTES : usize = KEY_SIZE \/ 8;$/;"	c
KMerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^pub struct KMerge<I>$/;"	s
KdfSpec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/api.rs	/^enum KdfSpec {$/;"	g
Key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    type Key = K;$/;"	T
Key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    type Key = usize;$/;"	T
Key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    type Key;$/;"	T
KeyFunction	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^trait KeyFunction<A> {$/;"	t
KeyFunction for ChunkIndex	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, A> KeyFunction<A> for ChunkIndex {$/;"	i
KeyFunction for F	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^impl<'a, A, K, F: ?Sized> KeyFunction<A> for F$/;"	i
KeySize	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^pub enum KeySize {$/;"	g
KeyType	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^enum KeyType {$/;"	g
KeyType	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^enum KeyType {$/;"	g
L	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^static L: [u8; 32] =$/;"	c
LazyBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> LazyBuffer<I>$/;"	i
LazyBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^struct LazyBuffer<I: Iterator> {$/;"	s
Linspace	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^pub struct Linspace<F> {$/;"	s
M5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^const M5: [usize; 10] = [$/;"	c
MAX_GEN_SIZE	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^const MAX_GEN_SIZE: usize = (1 << 20);$/;"	c
MIN_POOL_SIZE	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^pub const MIN_POOL_SIZE: usize = 64;$/;"	c
Mac	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^pub trait Mac {$/;"	t
Mac for Blake2b	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^impl Mac for Blake2b {$/;"	i
Mac for Blake2s	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^impl Mac for Blake2s {$/;"	i
Mac for Ghash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^impl Mac for Ghash {$/;"	i
Mac for Hmac	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^impl <D: Digest> Mac for Hmac<D> {$/;"	i
Mac for Poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^impl Mac for Poly1305 {$/;"	i
MacResult	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^impl MacResult {$/;"	i
MacResult	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^pub struct MacResult {$/;"	s
MacSpec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/api.rs	/^enum MacSpec {$/;"	g
MapFn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub type MapFn<I, B> where I: Iterator = iter::Map<I, fn(I::Item) -> B>;$/;"	T
Md5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^impl Md5 {$/;"	i
Md5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^pub struct Md5 {$/;"	s
Md5State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^impl Md5State {$/;"	i
Md5State	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^struct Md5State {$/;"	s
MendSlice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl<'a, T> MendSlice for &'a [T] {$/;"	i
MendSlice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl<'a, T> MendSlice for &'a mut [T] {$/;"	i
MendSlice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl<'a> MendSlice for &'a str {$/;"	i
MendSlice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^pub trait MendSlice$/;"	t
MendSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> MendSlices<I>$/;"	i
MendSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct MendSlices<I>$/;"	s
Merge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Merge<I, J>$/;"	s
MergeBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct MergeBy<I, J, F>$/;"	s
MergeCore	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> MergeCore<I, J>$/;"	i
MergeCore	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^struct MergeCore<I, J>$/;"	s
MinMaxResult	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/minmax.rs	/^impl<T: Clone> MinMaxResult<T> {$/;"	i
MinMaxResult	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/minmax.rs	/^pub enum MinMaxResult<T> {$/;"	g
Mul for Fe	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Mul for Fe {$/;"	i
MultiPeek	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I: Iterator> MultiPeek<I> {$/;"	i
MultiPeek	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct MultiPeek<I>$/;"	s
NROUNDS	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^const NROUNDS: usize = 24;$/;"	c
NUM_POOLS	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^const NUM_POOLS: usize = 32;$/;"	c
NoPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct NoPadding;$/;"	s
Node	/home/cuervo/Desktop/repos/subotai/src/kademlia/node.rs	/^impl Node {$/;"	i
Node	/home/cuervo/Desktop/repos/subotai/src/kademlia/node.rs	/^pub struct Node {$/;"	s
Node	/home/cuervo/Desktop/repos/subotai/src/node/mod.rs	/^pub trait Node<K, D> {$/;"	t
NodeInfo	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^pub struct NodeInfo {$/;"	s
Not for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl Not for u32x4 {$/;"	i
Ord for HeadTail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^impl<I> Ord for HeadTail<I>$/;"	i
Ord for Val	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    impl Ord for Val {$/;"	i
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    type Output = I::Item;$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    type Output;$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            type Output = A;$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^            type Output = ($($B::IntoIter,)*);$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    type Output = u32x4;$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    type Output = Fe;$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    type Output = GeP1P1;$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    type Output = Gf128;$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        type Output = u32x4;$/;"	T
Output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        type Output = u64x2;$/;"	T
OwnedReadBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl OwnedReadBuffer {$/;"	i
OwnedReadBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^pub struct OwnedReadBuffer {$/;"	s
OwnedWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl OwnedWriteBuffer {$/;"	i
OwnedWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^pub struct OwnedWriteBuffer {$/;"	s
PIL	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^const PIL: [usize; 24] = [$/;"	c
PadUsing	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^impl<I, F> PadUsing<I, F>$/;"	i
PadUsing	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^pub struct PadUsing<I, F> {$/;"	s
PaddingProcessor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub trait PaddingProcessor {$/;"	t
PaddingProcessor for DecPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> PaddingProcessor for DecPadding<X> {$/;"	i
PaddingProcessor for EncPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <X: PaddingProcessor> PaddingProcessor for EncPadding<X> {$/;"	i
PaddingProcessor for NoPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl PaddingProcessor for NoPadding {$/;"	i
PaddingProcessor for PkcsPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl PaddingProcessor for PkcsPadding {$/;"	i
ParseError	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^enum ParseError {$/;"	g
PartialEq for Fe	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl PartialEq for Fe {$/;"	i
PartialEq for HeadTail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^impl<I> PartialEq for HeadTail<I>$/;"	i
PartialEq for MacResult	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^impl PartialEq for MacResult {$/;"	i
PartialOrd for HeadTail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^impl<I> PartialOrd for HeadTail<I>$/;"	i
PartialOrd for Val	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    impl PartialOrd<Val> for Val {$/;"	i
Partition	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub enum Partition<L, R> {$/;"	g
PkcsPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^pub struct PkcsPadding;$/;"	s
Poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^impl Poly1305 {$/;"	i
Poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^pub struct Poly1305 {$/;"	s
Pool	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^impl Pool {$/;"	i
Pool	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^struct Pool {$/;"	s
Product	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I, J> Product<I, J>$/;"	i
Product	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Product<I, J>$/;"	s
PutBack	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> PutBack<I>$/;"	i
PutBack	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct PutBack<I>$/;"	s
PutBackN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I: Iterator> PutBackN<I> {$/;"	i
PutBackN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct PutBackN<I: Iterator> {$/;"	s
R	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static R: usize = 10;$/;"	c
RC	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^const RC: [u64; 24] = [$/;"	c
RC	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^static RC: [u64; 11 \/* R + 1 *\/] = [$/;"	c
RCON	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^static RCON: [u32; 10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];$/;"	c
ROTC	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^const ROTC: [usize; 24] = [$/;"	c
RangeExt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/step_by.rs	/^pub trait RangeExt<T> {$/;"	t
RangeExt for Range	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/step_by.rs	/^impl <T> RangeExt<T> for Range<T> where$/;"	i
Rc4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^impl Rc4 {$/;"	i
Rc4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^pub struct Rc4 {$/;"	s
RcIter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^impl<I> RcIter<I> {$/;"	i
RcIter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^pub struct RcIter<I> {$/;"	s
ReadBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^pub trait ReadBuffer {$/;"	t
ReadBuffer for OwnedReadBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl ReadBuffer for OwnedReadBuffer {$/;"	i
ReadBuffer for RefReadBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> ReadBuffer for RefReadBuffer<'a> {$/;"	i
RefReadBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> RefReadBuffer<'a> {$/;"	i
RefReadBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^pub struct RefReadBuffer<'a> {$/;"	s
RefWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> RefWriteBuffer<'a> {$/;"	i
RefWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^pub struct RefWriteBuffer<'a> {$/;"	s
RepeatCall	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^impl<F> RepeatCall<F> {$/;"	i
RepeatCall	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^pub struct RepeatCall<F> {$/;"	s
RepeatN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^impl<A> RepeatN<A> {$/;"	i
RepeatN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^pub struct RepeatN<A> {$/;"	s
Result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^            type Result = ($A, $($B, )* T);$/;"	T
Result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^            type Result = (T, );$/;"	T
Result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    type Result;$/;"	T
Ripemd160	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^impl Ripemd160 {$/;"	i
Ripemd160	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^pub struct Ripemd160 {$/;"	s
Rng for Fortuna	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^impl Rng for Fortuna {$/;"	i
RoundSetupInfo	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^type RoundSetupInfo = (u8, fn(&[u8], KeyType, &mut [u8]));$/;"	T
RoutingTable	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^impl RoutingTable {$/;"	i
RoutingTable	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^pub struct RoutingTable {$/;"	s
Rpc	/home/cuervo/Desktop/repos/subotai/src/kademlia/rpc.rs	/^pub struct Rpc{$/;"	s
RpcType	/home/cuervo/Desktop/repos/subotai/src/kademlia/rpc.rs	/^pub enum RpcType {$/;"	g
S12	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^static S12:u32x4 = u32x4(12, 12, 12, 12);$/;"	c
S13	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^const S13:u32x4 = u32x4(13, 13, 13, 13);$/;"	c
S16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^static S16:u32x4 = u32x4(16, 16, 16, 16);$/;"	c
S18	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^const S18:u32x4 = u32x4(18, 18, 18, 18);$/;"	c
S32	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^static S32:u32x4 = u32x4(32, 32, 32, 32);$/;"	c
S32	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^const S32:u32x4 = u32x4(32, 32, 32, 32);$/;"	c
S7	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^static S7:u32x4 = u32x4(7, 7, 7, 7);$/;"	c
S7	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^const S7:u32x4 = u32x4(7, 7, 7, 7);$/;"	c
S8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^static S8:u32x4 = u32x4(8, 8, 8, 8);$/;"	c
S9	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^const S9:u32x4 = u32x4(9, 9, 9, 9);$/;"	c
SIGMA	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^static SIGMA : [[usize; 16]; 12] = [$/;"	c
SIGMA	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^static SIGMA : [[usize; 16]; 10] = [$/;"	c
STATE_LEN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^const STATE_LEN: usize = 5;$/;"	c
STATE_LEN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^const STATE_LEN: usize = 8;$/;"	c
Salsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^impl Salsa20 {$/;"	i
Salsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^pub struct Salsa20 {$/;"	s
SalsaState	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^struct SalsaState {$/;"	s
ScryptParams	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^impl ScryptParams {$/;"	i
ScryptParams	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^pub struct ScryptParams {$/;"	s
SeedableRng for Fortuna	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^impl<'a> SeedableRng<&'a [u8]> for Fortuna {$/;"	i
SetLength	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^pub trait SetLength {$/;"	t
SetLength for ZipTrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^        impl<$($B),*> SetLength for ZipTrusted<($($B,)*)>$/;"	i
Sha1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^impl Sha1 {$/;"	i
Sha1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^pub struct Sha1 {$/;"	s
Sha1Hash	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^impl Sha1Hash {$/;"	i
Sha1Hash	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^pub struct Sha1Hash {$/;"	s
Sha224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha224 {$/;"	i
Sha224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha224 {$/;"	s
Sha256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha256 {$/;"	i
Sha256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha256 {$/;"	s
Sha3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^impl Sha3 {$/;"	i
Sha3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^pub struct Sha3 {$/;"	s
Sha384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha384 {$/;"	i
Sha384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha384 {$/;"	s
Sha3Mode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^impl Sha3Mode {$/;"	i
Sha3Mode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^pub enum Sha3Mode {$/;"	g
Sha512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512 {$/;"	i
Sha512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512 {$/;"	s
Sha512Trunc224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512Trunc224 {$/;"	i
Sha512Trunc224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512Trunc224 {$/;"	s
Sha512Trunc256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^impl Sha512Trunc256 {$/;"	i
Sha512Trunc256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub struct Sha512Trunc256 {$/;"	s
Shl for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl Shl<u32x4> for u32x4 {$/;"	i
Shl for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl Shl<usize> for u32x4 {$/;"	i
Shr for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl Shr<u32x4> for u32x4 {$/;"	i
Shr for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl Shr<usize> for u32x4 {$/;"	i
SimdExt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^pub trait SimdExt {$/;"	t
SimdExt for fake	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^impl SimdExt for fake::u32x4 {$/;"	i
SizeHint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/size_hint.rs	/^pub type SizeHint = (usize, Option<usize>);$/;"	T
Sosemanuk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl Sosemanuk {$/;"	i
Sosemanuk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^pub struct Sosemanuk {$/;"	s
StandardPadding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait StandardPadding {$/;"	t
StandardPadding for T	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl <T: FixedBuffer> StandardPadding for T {$/;"	i
Step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> Step<I>$/;"	i
Step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Step<I> {$/;"	s
StepUp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/step_by.rs	/^pub struct StepUp<T> {$/;"	s
Stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^impl<'a, A> Stride<'a, A> {$/;"	i
Stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^pub struct Stride<'a, A: 'a> {$/;"	s
StrideMut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^impl<'a, A> StrideMut<'a, A> {$/;"	i
StrideMut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^impl<'a, A> StrideMut<'a, A>$/;"	i
StrideMut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^pub struct StrideMut<'a, A: 'a> {$/;"	s
Sub for Fe	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub for Fe {$/;"	i
Sub for GeP3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub<GeCached> for GeP3 {$/;"	i
Sub for GeP3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^impl Sub<GePrecomp> for GeP3 {$/;"	i
Sub for u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    impl Sub for u32x4 {$/;"	i
SymmetricCipherError	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub enum SymmetricCipherError {$/;"	g
SymmetricCipherSpec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/api.rs	/^enum SymmetricCipherSpec {$/;"	g
SynchronousStreamCipher	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^pub trait SynchronousStreamCipher {$/;"	t
SynchronousStreamCipher for Box	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^impl SynchronousStreamCipher for Box<SynchronousStreamCipher + 'static> {$/;"	i
SynchronousStreamCipher for ChaCha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^impl SynchronousStreamCipher for ChaCha20 {$/;"	i
SynchronousStreamCipher for CtrMode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptor> SynchronousStreamCipher for CtrMode<A> {$/;"	i
SynchronousStreamCipher for CtrModeX8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^impl <A: BlockEncryptorX8> SynchronousStreamCipher for CtrModeX8<A> {$/;"	i
SynchronousStreamCipher for Hc128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^impl SynchronousStreamCipher for Hc128 {$/;"	i
SynchronousStreamCipher for Rc4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^impl SynchronousStreamCipher for Rc4 {$/;"	i
SynchronousStreamCipher for Salsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^impl SynchronousStreamCipher for Salsa20 {$/;"	i
SynchronousStreamCipher for Sosemanuk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^impl SynchronousStreamCipher for Sosemanuk {$/;"	i
TESTS	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    static TESTS: [(&'static str, &'static str); 18] = [$/;"	c
TakeWhileRef	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<'a, I, F> TakeWhileRef<'a, I, F>$/;"	i
TakeWhileRef	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct TakeWhileRef<'a, I: 'a, F> {$/;"	s
Tee	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/tee.rs	/^pub struct Tee<I>$/;"	s
TeeBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/tee.rs	/^struct TeeBuffer<A, I> {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^        struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^        struct Test{$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    struct Test {$/;"	s
Test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    struct Test {$/;"	s
TestData	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    struct TestData {$/;"	s
TestVector	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    struct TestVector {$/;"	s
TestVector	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^        struct TestVector {$/;"	s
TestVector	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  struct TestVector {$/;"	s
TestVector	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hkdf.rs	/^    struct TestVector<D: Digest>{$/;"	s
ToFloat	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^pub trait ToFloat<F> : Copy {$/;"	t
ToFloat for usize	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl ToFloat<f32> for usize {$/;"	i
ToFloat for usize	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^impl ToFloat<f64> for usize {$/;"	i
U32X4_0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^const U32X4_0: u32x4 = u32x4(0, 0, 0, 0);$/;"	c
U32X4_1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^const U32X4_1: u32x4 = u32x4(0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff);$/;"	c
Unfold	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^impl<A, St, F> Unfold<St, F>$/;"	i
Unfold	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^pub struct Unfold<St, F> {$/;"	s
Unique	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct Unique<I: Iterator> {$/;"	s
UniqueBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I: Iterator, V, F> UniqueBy<I, V, F>$/;"	i
UniqueBy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct UniqueBy<I: Iterator, V, F> {$/;"	s
Val	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    struct Val(u32, u32);$/;"	s
WORK_BUF_LEN	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^const WORK_BUF_LEN: usize = 16;$/;"	c
WhileSome	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^impl<I> WhileSome<I> {$/;"	i
WhileSome	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub struct WhileSome<I> {$/;"	s
Whirlpool	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^impl Whirlpool {$/;"	i
Whirlpool	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^pub struct Whirlpool {$/;"	s
WriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^pub trait WriteBuffer {$/;"	t
WriteBuffer for BorrowedWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> WriteBuffer for BorrowedWriteBuffer<'a> {$/;"	i
WriteBuffer for OwnedWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl WriteBuffer for OwnedWriteBuffer {$/;"	i
WriteBuffer for RefWriteBuffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^impl <'a> WriteBuffer for RefWriteBuffer<'a> {$/;"	i
WriteExt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub trait WriteExt {$/;"	t
WriteExt for T	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^impl <T> WriteExt for T where T: io::Write {$/;"	i
Zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^impl<T> Zip<T>$/;"	i
Zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^pub struct Zip<T> {$/;"	s
ZipEq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_eq.rs	/^pub struct ZipEq<I, J> {$/;"	s
ZipLongest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^impl<T, U> ZipLongest<T, U>$/;"	i
ZipLongest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^pub struct ZipLongest<T, U> {$/;"	s
ZipSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^impl<'a, 'b, A, B> ZipSlices<&'a [A], &'b [B]> {$/;"	i
ZipSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^impl<T, U> ZipSlices<T, U>$/;"	i
ZipSlices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^pub struct ZipSlices<T, U> {$/;"	s
ZipTrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^impl<T> ZipTrusted<T>$/;"	i
ZipTrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^pub struct ZipTrusted<T> {$/;"	s
adaptors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod adaptors;$/;"	m
add	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/size_hint.rs	/^pub fn add(a: SizeHint, b: SizeHint) -> SizeHint {$/;"	f
add	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: Fe) -> Fe {$/;"	f
add	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: GeCached) -> GeP1P1 {$/;"	f
add	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn add(self, _rhs: GePrecomp) -> GeP1P1 {$/;"	f
add	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn add(self, rhs: u32x4) -> u32x4 {$/;"	f
add	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn add(self, rhs: u64x2) -> u64x2 {$/;"	f
add_and_mul	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn add_and_mul(&mut self, y: Gf128, hs: &[Gf128; 128]) {$/;"	f
add_bytes_to_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn add_bytes_to_bits(bits: u64, bytes: u64) -> u64 {$/;"	f
add_bytes_to_bits_tuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn add_bytes_to_bits_tuple$/;"	f
add_ctr	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^fn add_ctr(ctr: &mut [u8], mut ammount: u8) {$/;"	f
add_input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^fn add_input(st: &mut Sha1, msg: &[u8]) {$/;"	f
add_random_event	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn add_random_event(&mut self, s: u8, i: usize, e: &[u8]) {$/;"	f
add_rotate_xor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! add_rotate_xor {$/;"	d
add_round_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn add_round_key(self, rk: &Bs8State<T>) -> Bs8State<T> {$/;"	f
add_round_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn add_round_key(self, rk: &Self) -> Self;$/;"	f
add_scalar	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/size_hint.rs	/^pub fn add_scalar(sh: SizeHint, x: usize) -> SizeHint {$/;"	f
advance_state	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn advance_state(&mut self) {$/;"	f
aead	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod aead;$/;"	m
aes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod aes;$/;"	m
aes_cbc_no_padding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_no_padding() {$/;"	f
aes_cbc_no_padding_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_no_padding_tests() -> Vec<CbcTest> {$/;"	f
aes_cbc_pkcs_padding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_pkcs_padding() {$/;"	f
aes_cbc_pkcs_padding_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_cbc_pkcs_padding_bench(bh: &mut Bencher) {$/;"	f
aes_cbc_pkcs_padding_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_cbc_pkcs_padding_tests() -> Vec<CbcTest> {$/;"	f
aes_ctr	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr() {$/;"	f
aes_ctr_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ctr_bench(bh: &mut Bencher) {$/;"	f
aes_ctr_box	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn aes_ctr_box() {$/;"	f
aes_ctr_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn aes_ctr_tests() -> Vec<CtrTest> {$/;"	f
aes_ctr_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr_tests() -> Vec<CtrTest> {$/;"	f
aes_ctr_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ctr_x8() {$/;"	f
aes_ctr_x8_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ctr_x8_bench(bh: &mut Bencher) {$/;"	f
aes_ecb_no_padding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_no_padding() {$/;"	f
aes_ecb_no_padding_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn aes_ecb_no_padding_bench(bh: &mut Bencher) {$/;"	f
aes_ecb_no_padding_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_no_padding_tests() -> Vec<EcbTest> {$/;"	f
aes_ecb_pkcs_padding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_pkcs_padding() {$/;"	f
aes_ecb_pkcs_padding_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn aes_ecb_pkcs_padding_tests() -> Vec<EcbTest> {$/;"	f
aes_gcm	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod aes_gcm;$/;"	m
aes_gcm_decrypt_fail_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_decrypt_fail_test() {$/;"	f
aes_gcm_decrypt_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_decrypt_test() {$/;"	f
aes_gcm_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn aes_gcm_test() {$/;"	f
aes_safe_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aes_safe_bench(bh: &mut Bencher) {$/;"	f
aes_safe_x8_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aes_safe_x8_bench(bh: &mut Bencher) {$/;"	f
aesni	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod aesni;$/;"	m
aesni_128_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_128_bench(bh: &mut Bencher) {$/;"	f
aesni_192_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_192_bench(bh: &mut Bencher) {$/;"	f
aesni_256_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    pub fn aesni_256_bench(bh: &mut Bencher) {$/;"	f
aesni_bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn aesni_bench(bh: &mut Bencher, key_size: KeySize) {$/;"	f
aessafe	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod aessafe;$/;"	m
all	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn all<I, F>(iterable: I, f: F) -> bool$/;"	f
any	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn any<I, F>(iterable: I, f: F) -> bool$/;"	f
append	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^            fn append(self, x: T) -> ($A, $($B,)* T) {$/;"	f
append	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^            fn append(self, x: T) -> (T, ) {$/;"	f
append	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn append(self, x: X) -> Self::Result;$/;"	f
apply_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn apply_key(&mut self) {$/;"	f
apply_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn apply_key(&mut self) {$/;"	f
apply_param	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn apply_param(&mut self) {$/;"	f
apply_param	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn apply_param(&mut self) {$/;"	f
arbitrary	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn arbitrary<G: qc::Gen>(g: &mut G) -> Self$/;"	f
assert_equal	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub fn assert_equal<I, J>(a: I, b: J)$/;"	f
base_example	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn base_example() {$/;"	f
batching	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn batching<B, F>(self, f: F) -> Batching<Self, F>$/;"	f
batching	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn batching() {$/;"	f
bcrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt.rs	/^pub fn bcrypt(cost: u32, salt: &[u8], password: &[u8], output: &mut [u8]) {$/;"	f
bcrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod bcrypt;$/;"	m
bcrypt_16_5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt.rs	/^    pub fn bcrypt_16_5(bh: & mut Bencher) {$/;"	f
bcrypt_hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^fn bcrypt_hash(hpass: &[u8], hsalt: &[u8], output: &mut [u8; 32]) {$/;"	f
bcrypt_pbkdf	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^pub fn bcrypt_pbkdf(password: &[u8], salt: &[u8], rounds: u32, output: &mut [u8]) {$/;"	f
bcrypt_pbkdf	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod bcrypt_pbkdf;$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^mod bench {$/;"	m
bench	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^mod bench {$/;"	m
bench_bcrypt_pbkdf_5_32	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn bench_bcrypt_pbkdf_5_32(b: &mut Bencher) {$/;"	f
big_sigma0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma0 {$/;"	d
big_sigma1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! big_sigma1 {$/;"	d
bit_slice_1x128_with_u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_1x128_with_u32x4(data: &[u8]) -> Bs8State<u32x4> {$/;"	f
bit_slice_1x16_with_u16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_1x16_with_u16(data: &[u8]) -> Bs8State<u16> {$/;"	f
bit_slice_4x1_with_u16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_4x1_with_u16(a: u32) -> Bs8State<u16> {$/;"	f
bit_slice_4x4_with_u16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_4x4_with_u16(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u16> {$/;"	f
bit_slice_fill_4x4_with_u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn bit_slice_fill_4x4_with_u32x4(a: u32, b: u32, c: u32, d: u32) -> Bs8State<u32x4> {$/;"	f
bitand	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn bitand(self, rhs: u32x4) -> u32x4 {$/;"	f
bitor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn bitor(self, rhs: u32x4) -> u32x4 {$/;"	f
bitxor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn bitxor(self, rhs: Gf128) -> Gf128 {$/;"	f
bitxor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn bitxor(self, rhs: u32x4) -> u32x4 {$/;"	f
blake2b	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b(out: &mut[u8], input: &[u8], key: &[u8]) {$/;"	f
blake2b	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod blake2b;$/;"	m
blake2b_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_10(bh: & mut Bencher) {$/;"	f
blake2b_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_1k(bh: & mut Bencher) {$/;"	f
blake2b_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn blake2b_64k(bh: & mut Bencher) {$/;"	f
blake2s	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s(out: &mut[u8], input: &[u8], key: &[u8]) {$/;"	f
blake2s	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod blake2s;$/;"	m
blake2s_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_10(bh: & mut Bencher) {$/;"	f
blake2s_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_1k(bh: & mut Bencher) {$/;"	f
blake2s_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn blake2s_64k(bh: & mut Bencher) {$/;"	f
blank_hash	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^   fn blank_hash() -> Sha1Hash {$/;"	f
block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn block(&mut self, m: &[u8]) {$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn block_size(&self) -> usize { 16 }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^            fn block_size(&self) -> usize { 16 }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn block_size(&self) -> usize { 8 * BLAKE2B_BLOCKBYTES }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn block_size(&self) -> usize { 8 * BLAKE2S_BLOCKBYTES }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn block_size(&self) -> usize {$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^    fn block_size(&self) -> usize;$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 128 }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn block_size(&self) -> usize { 64 }$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn block_size(&self) -> usize {$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn block_size(&self) -> usize;$/;"	f
block_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn block_size(&self) -> usize {$/;"	f
blockmodes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod blockmodes;$/;"	m
blowfish	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn blowfish(bh: &mut Bencher) {$/;"	f
blowfish	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod blowfish;$/;"	m
bool3ary_150	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_150 {$/;"	d
bool3ary_202	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_202 {$/;"	d
bool3ary_202	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_202 {$/;"	d
bool3ary_232	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! bool3ary_232 {$/;"	d
bool3ary_232	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! bool3ary_232 {$/;"	d
borrow_write_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn borrow_write_buffer(&mut self) -> BorrowedWriteBuffer {$/;"	f
bucket_for_node	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^   fn bucket_for_node(&self, key : &Sha1Hash) -> Option<usize> {$/;"	f
buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod buffer;$/;"	m
calculate_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^fn calculate_block<M: Mac>($/;"	f
call_mut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn call_mut(&mut self, _arg: A) -> Self::Key {$/;"	f
call_mut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn call_mut(&mut self, arg: A) -> Self::Key {$/;"	f
call_mut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn call_mut(&mut self, arg: A) -> Self::Key;$/;"	f
capacity	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.buff.len() }$/;"	f
capacity	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize { self.len }$/;"	f
capacity	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn capacity(&self) -> usize;$/;"	f
capacity	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn capacity(&self) -> usize {$/;"	f
cartesian_product	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn cartesian_product<J>(self, other: J) -> Product<Self, J::IntoIter>$/;"	f
cbc_decryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^pub fn cbc_decryptor<X: PaddingProcessor + Send + 'static>($/;"	f
cbc_encryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^pub fn cbc_encryptor<X: PaddingProcessor + Send + 'static>($/;"	f
chacha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod chacha20;$/;"	m
chacha20_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_10(bh: & mut Bencher) {$/;"	f
chacha20_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_1k(bh: & mut Bencher) {$/;"	f
chacha20_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn chacha20_64k(bh: & mut Bencher) {$/;"	f
chacha20poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod chacha20poly1305;$/;"	m
chacha20poly1305_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_10(bh: & mut Bencher) {$/;"	f
chacha20poly1305_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_1k(bh: & mut Bencher) {$/;"	f
chacha20poly1305_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    pub fn chacha20poly1305_64k(bh: & mut Bencher) {$/;"	f
chain	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn chain<I, J>(i: I, j: J) -> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>$/;"	f
change_basis_a2x	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_a2x(&self) -> Bs8State<T> {$/;"	f
change_basis_s2x	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_s2x(&self) -> Bs8State<T> {$/;"	f
change_basis_x2a	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_x2a(&self) -> Bs8State<T> {$/;"	f
change_basis_x2s	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn change_basis_x2s(&self) -> Bs8State<T> {$/;"	f
check_s_lt_l	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^fn check_s_lt_l(s: &[u8]) -> bool$/;"	f
chunks_lazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn chunks_lazy(self, size: usize) -> ChunksLazy<Self>$/;"	f
chunks_lazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn chunks_lazy() {$/;"	f
chunks_lazy_1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn chunks_lazy_1(b: &mut test::Bencher) {$/;"	f
circular_shift	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^fn circular_shift(bits: u32, word: u32) -> u32 {$/;"	f
clone	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn clone(&self) -> Self {$/;"	f
clone	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn clone(&self) -> KMerge<I> {$/;"	f
clone	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn clone(&self) -> Self {$/;"	f
clone	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    fn clone(&self) -> RcIter<I> {$/;"	f
clone	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^    fn clone(&self) -> Stride<'a, A> {$/;"	f
clone	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^        fn clone(&self) -> Self$/;"	f
clone	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn clone(&self) -> Self {$/;"	f
clone_fields	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^macro_rules! clone_fields {$/;"	d
clone_fields	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^macro_rules! clone_fields {$/;"	d
cmp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn cmp(&self, other: &Self) -> Ordering {$/;"	f
cmp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^        fn cmp(&self, other: &Val) -> Ordering {$/;"	f
coalesce	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn coalesce<F>(self, f: F) -> Coalesce<Self, F>$/;"	f
code	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    pub fn code<'s>(&'s self) -> &'s [u8] {$/;"	f
collect_vec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn collect_vec(self) -> Vec<Self::Item>$/;"	f
columnround	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^fn columnround(state: &mut SalsaState) -> () {$/;"	f
combinations	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn combinations(self) -> Combinations<Self>$/;"	f
combinations_n	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn combinations_n(self, n: usize) -> CombinationsN<Self>$/;"	f
combinations_n	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn combinations_n() {$/;"	f
compress	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn compress(&mut self) {$/;"	f
compress	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn compress(&mut self) {$/;"	f
computing_height	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^    fn computing_height() {$/;"	f
cond_xor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn cond_xor(self, x: Gf128, y: Gf128) -> Gf128 {$/;"	f
construct	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn construct(a: u32, b: u32, c: u32, d: u32, bit: u32) -> u16 {$/;"	f
construct_ctr_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^fn construct_ctr_x8(in_ctr: &[u8], out_ctr_x8: &mut [u8]) {$/;"	f
copy_memory	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn copy_memory(src: &[u8], dst: &mut [u8]) {$/;"	f
correct_size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^fn correct_size_hint<I: Iterator>(mut it: I) -> bool {$/;"	f
count_clones	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn count_clones() {$/;"	f
create_keys	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^fn create_keys<D: Digest>(digest: &mut D, key: &[u8]) -> (Vec<u8>, Vec<u8>) {$/;"	f
create_round_keys	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn create_round_keys(key: &[u8], key_type: KeyType, round_keys: &mut [[u32; 4]]) {$/;"	f
cryptoutil	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^mod cryptoutil;$/;"	m
ctr	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^pub fn ctr($/;"	f
current_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn current_buffer<'s>(&'s mut self) -> &'s [u8] {$/;"	f
current_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn current_buffer<'s>(&'s mut self) -> &'s [u8];$/;"	f
curve25519	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn curve25519(n: &[u8], p: &[u8]) -> [u8; 32] {$/;"	f
curve25519	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod curve25519;$/;"	m
curve25519_base	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn curve25519_base(x: &[u8]) -> [u8; 32] {$/;"	f
dbl	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn dbl(&self) -> GeP1P1 {$/;"	f
deconstruct	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn deconstruct(bs: &Bs8State<u16>, bit: u32) -> u32 {$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/examples/symmetriccipher.rs	/^fn decrypt(encrypted_data: &[u8], key: &[u8], iv: &[u8]) -> Result<Vec<u8>, symmetriccipher::SymmetricCipherError> {$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aead.rs	/^	fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8]) -> bool;$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8])  -> bool {$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt(&self, mut l: u32, mut r: u32) -> (u32, u32) {$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    fn decrypt(&mut self, input: &[u8], output: &mut [u8], tag: &[u8]) -> bool {$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	f
decrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	f
decrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^            fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	f
decrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	f
decrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt_block(&self, input: &[u8], output: &mut [u8]);$/;"	f
decrypt_block_aesni	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^fn decrypt_block_aesni(rounds: u8, input: &[u8], round_keys: &[u8], output: &mut [u8]) {$/;"	f
decrypt_block_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^            fn decrypt_block_x8(&self, input: &[u8], output: &mut [u8]) {$/;"	f
decrypt_block_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn decrypt_block_x8(&self, input: &[u8], output: &mut [u8]);$/;"	f
decrypt_core	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn decrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {$/;"	f
decrypt_eay_test_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn decrypt_eay_test_vectors() {$/;"	f
dedup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn dedup(self) -> Dedup<Self>$/;"	f
dedup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn dedup() {$/;"	f
default	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn default() -> u32x4 {$/;"	f
default_param	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn default_param(outlen: u8) -> Blake2bParam {$/;"	f
default_param	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn default_param(outlen: u8) -> Blake2sParam {$/;"	f
define_aes_dec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_dec($/;"	d
define_aes_dec_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_dec_x8($/;"	d
define_aes_enc	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_enc($/;"	d
define_aes_enc_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_enc_x8($/;"	d
define_aes_impl	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_impl($/;"	d
define_aes_impl_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_impl_x8($/;"	d
define_aes_struct	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_struct($/;"	d
define_aes_struct_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^macro_rules! define_aes_struct_x8($/;"	d
derive_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^fn derive_key(key: &mut [u8], mask: u8) {$/;"	f
diff	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod diff;$/;"	m
diff_longer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn diff_longer() {$/;"	f
diff_mismatch	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn diff_mismatch() {$/;"	f
diff_shorter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn diff_shorter() {$/;"	f
diff_with	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/diff.rs	/^pub fn diff_with<I, J, F>(i: I, j: J, is_equal: F)$/;"	f
digest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod digest;$/;"	m
digest_length	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn digest_length(&self) -> usize {$/;"	f
digest_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^mod digest_tests {$/;"	m
digest_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^mod digest_tests {$/;"	m
distance	/home/cuervo/Desktop/repos/subotai/src/kademlia/node.rs	/^   fn distance(node_alpha : &Self, node_beta : &Self) -> Sha1Hash {$/;"	f
distance	/home/cuervo/Desktop/repos/subotai/src/node/mod.rs	/^   fn distance(&Self, &Self) -> D;$/;"	f
distance_between_two_nodes_is_xor	/home/cuervo/Desktop/repos/subotai/src/kademlia/node.rs	/^    fn distance_between_two_nodes_is_xor() {$/;"	f
div_rem	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^fn div_rem(x: usize, d: usize) -> (usize, usize) {$/;"	f
do_keypair_case	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^    fn do_keypair_case(seed: [u8; 32], expected_secret: [u8; 64], expected_public: [u8; 32]) {$/;"	f
do_sign_verify_case	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^    fn do_sign_verify_case(seed: [u8; 32], message: &[u8], expected_signature: [u8; 64]) {$/;"	f
donna_self_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn donna_self_test() {$/;"	f
double_scalarmult_vartime	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn double_scalarmult_vartime(a_scalar: &[u8], a_point: GeP3, b_scalar: &[u8]) -> GeP2 {$/;"	f
drop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn drop(&mut self) {$/;"	f
drop_group	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn drop_group(&mut self, client: usize) {$/;"	f
drop_group	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn drop_group(&self, client: usize) {$/;"	f
dropn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn dropn(&mut self, mut n: usize) -> usize {$/;"	f
dropn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn dropn() {$/;"	f
dropping	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn dropping(mut self, n: usize) -> Self$/;"	f
dropping	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn dropping() {$/;"	f
dropping_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn dropping_back(mut self, n: usize) -> Self$/;"	f
eay_test_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn eay_test_vectors() -> Vec<Test> {$/;"	f
ecb_decryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^pub fn ecb_decryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ecb_encryptor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^pub fn ecb_encryptor<X: PaddingProcessor + Send + 'static>($/;"	f
ed25519	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod ed25519;$/;"	m
edwards_to_montgomery_x	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^fn edwards_to_montgomery_x(ed_y: Fe) -> Fe {$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/examples/symmetriccipher.rs	/^fn encrypt(data: &[u8], key: &[u8], iv: &[u8]) -> Result<Vec<u8>, symmetriccipher::SymmetricCipherError> {$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aead.rs	/^	fn encrypt(&mut self, input: &[u8], output: &mut [u8], tag: &mut [u8]);$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn encrypt(&mut self, input: &[u8], output: &mut [u8], tag: &mut [u8]) {$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn encrypt(&self, mut l: u32, mut r: u32) -> (u32, u32) {$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^    fn encrypt(&mut self, input: &[u8], output: &mut [u8], out_tag: &mut [u8]) {$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, _: bool)$/;"	f
encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt(&mut self, input: &mut RefReadBuffer, output: &mut RefWriteBuffer, eof: bool)$/;"	f
encrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	f
encrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^            fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	f
encrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]) {$/;"	f
encrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt_block(&self, input: &[u8], output: &mut [u8]);$/;"	f
encrypt_block_aesni	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^fn encrypt_block_aesni(rounds: u8, input: &[u8], round_keys: &[u8], output: &mut [u8]) {$/;"	f
encrypt_block_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^            fn encrypt_block_x8(&self, input: &[u8], output: &mut [u8]) {$/;"	f
encrypt_block_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn encrypt_block_x8(&self, input: &[u8], output: &mut [u8]);$/;"	f
encrypt_core	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn encrypt_core<S: AesOps + Copy>(state: &S, sk: &[S]) -> S {$/;"	f
encrypt_eay_test_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn encrypt_eay_test_vectors() {$/;"	f
end	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn end(&self) -> Option<usize> {$/;"	f
enumerate	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn enumerate<I>(iterable: I) -> iter::Enumerate<I::IntoIter>$/;"	f
enumerate_from	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn enumerate_from<K>(self, start: K) -> EnumerateFrom<Self, K>$/;"	f
enumerate_from_overflow	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn enumerate_from_overflow() {$/;"	f
eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn eq(&self, other: &HeadTail<I>) -> bool {$/;"	f
eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn eq(&self, other: &Fe) -> bool {$/;"	f
eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    fn eq(&self, x: &MacResult) -> bool {$/;"	f
equal	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn equal(b: &mut test::Bencher) {$/;"	f
equal	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub fn equal<I, J>(a: I, b: J) -> bool$/;"	f
equal	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^fn equal(b: u8, c: u8) -> i32 {$/;"	f
equal_chunks_lazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_chunks_lazy(a: Vec<u8>, size: u8) -> bool {$/;"	f
equal_combinations	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_combinations(it: Iter<i16>) -> bool {$/;"	f
equal_dedup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_dedup(a: Vec<i32>) -> bool {$/;"	f
equal_intersperse	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_intersperse(a: Vec<i32>, x: i32) -> bool {$/;"	f
equal_islice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_islice(a: Vec<i16>, x: usize, y: usize) -> bool {$/;"	f
equal_kmerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_kmerge(a: Vec<i16>, b: Vec<i16>, c: Vec<i16>) -> bool {$/;"	f
equal_merge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_merge(a: Vec<i16>, b: Vec<i16>) -> bool {$/;"	f
equal_partition	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_partition(a: Vec<i32>) -> bool {$/;"	f
equal_stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_stride(data: Vec<u8>, mut stride: i8) -> bool {$/;"	f
equal_zip_eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_zip_eq(a: Vec<i32>, b: Vec<i32>) -> bool {$/;"	f
equal_zipslices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_zipslices(a: Vec<u8>, b: Vec<u8>) -> bool {$/;"	f
equal_zipslices_rev	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_zipslices_rev(a: Vec<u8>, b: Vec<u8>) -> bool {$/;"	f
equal_zipslices_stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_zipslices_stride(a: Vec<u8>, b: Vec<u8>, s1: i8, s2: i8) -> bool {$/;"	f
equal_ziptrusted_mix	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn equal_ziptrusted_mix(a: Vec<u8>, b: Vec<()>, x: u8, y: u8) -> bool {$/;"	f
exact_repeatn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn exact_repeatn((n, x): (usize, i32)) -> bool {$/;"	f
exact_size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^fn exact_size<I: ExactSizeIterator>(mut it: I) -> bool {$/;"	f
exact_size_zipslices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn exact_size_zipslices(a: Vec<u8>, b: Vec<u8>) -> bool {$/;"	f
exact_size_zipslices_rev	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn exact_size_zipslices_rev(a: Vec<u8>, b: Vec<u8>) -> bool {$/;"	f
exact_size_zipslices_stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn exact_size_zipslices_stride(a: Vec<u8>, b: Vec<u8>, s1: i8, s2: i8) -> bool {$/;"	f
exchange	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn exchange(public_key: &[u8], private_key: &[u8]) -> [u8; 32] {$/;"	f
expand	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn expand(key: &[u8], nonce: &[u8]) -> ChaChaState {$/;"	f
expand	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn expand(key: &[u8], nonce: &[u8]) -> SalsaState {$/;"	f
expand_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn expand_key(&mut self, key: &[u8]) {$/;"	f
expand_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^fn expand_key<D: Digest>(digest: &mut D, key: &[u8]) -> Vec<u8> {$/;"	f
f	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^        fn f(u: u32, v: u32, w: u32) -> u32 {$/;"	f
f1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^fn f1(x: u32) -> u32 {$/;"	f
f2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^fn f2(x: u32) -> u32 {$/;"	f
fake	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^mod fake {$/;"	m
fast_mode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn fast_mode<R: ReadBuffer, W: WriteBuffer>($/;"	f
ffmulx	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn ffmulx(x: u32) -> u32 {$/;"	f
fill_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn fill_bytes(&mut self, dest: &mut [u8]) {$/;"	f
finalize	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn finalize( &mut self, out: &mut [u8] ) {$/;"	f
finalize	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn finalize( &mut self, out: &mut [u8] ) {$/;"	f
finalize	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn finalize(&mut self) {$/;"	f
find_position	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn find_position<P>(&mut self, mut pred: P) -> Option<(usize, Self::Item)>$/;"	f
finish	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn finish(&mut self) {$/;"	f
finish	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn finish(&mut self) {$/;"	f
fixed_time_eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/util.rs	/^pub fn fixed_time_eq(lhs: &[u8], rhs: &[u8]) -> bool {$/;"	f
flatten	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn flatten(self) -> Flatten<Self>$/;"	f
flatten_clone	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn flatten_clone() {$/;"	f
flatten_iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn flatten_iter() {$/;"	f
flatten_rev	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn flatten_rev() {$/;"	f
flush	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn flush(&mut self) {$/;"	f
fmt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^            impl<'a, I> fmt::$fmt_trait for FormatDefault<'a, I>$/;"	i
fmt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result$/;"	f
fmt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^        impl<'a, A> fmt::Debug for $name<'a, A>$/;"	i
fmt::Display for Format	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^impl<'a, I, F> fmt::Display for Format<'a, I, F>$/;"	i
fold	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn fold<I, B, F>(iterable: I, init: B, f: F) -> B$/;"	f
fold1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn fold1<F>(&mut self, mut f: F) -> Option<Self::Item>$/;"	f
fold_options	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn fold_options<A, B, F>(&mut self, mut start: B, mut f: F) -> Option<B>$/;"	f
fold_results	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn fold_results<A, E, B, F>(&mut self, mut start: B, mut f: F) -> Result<B, E>$/;"	f
fold_while	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn fold_while<B, F>(self, init: B, mut f: F) -> B$/;"	f
fold_while	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn fold_while() {$/;"	f
foreach	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn foreach<F>(&mut self, mut f: F)$/;"	f
foreach	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn foreach() {$/;"	f
format	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^    fn format<F>(&self, f: &mut fmt::Formatter, mut cb: F) -> fmt::Result$/;"	f
format	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn format<F>(self, sep: &str, format: F) -> Format<Self, F>$/;"	f
format	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod format;$/;"	m
format	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn format() {$/;"	f
format_default	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn format_default(self, sep: &str) -> FormatDefault<Self>$/;"	f
fortuna	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod fortuna;$/;"	m
fortuna_new_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_1k(bh: &mut Bencher) {$/;"	f
fortuna_new_32	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_32(bh: &mut Bencher) {$/;"	f
fortuna_new_64	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_64(bh: &mut Bencher) {$/;"	f
fortuna_new_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn fortuna_new_64k(bh: &mut Bencher) {$/;"	f
free	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub mod free;$/;"	m
from	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^    fn from(err: ParseFloatError) -> Self {$/;"	f
from_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn from_bytes(s: &[u8]) -> Fe {$/;"	f
from_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn from_bytes(bytes: &[u8]) -> Gf128 {$/;"	f
from_bytes_negate_vartime	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn from_bytes_negate_vartime(s: &[u8]) -> Option<GeP3> {$/;"	f
from_ptr_len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^    pub unsafe fn from_ptr_len(begin: *const A, nelem: usize, stride: isize) -> Stride<'a, A>$/;"	f
from_ptr_len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^    pub unsafe fn from_ptr_len(begin: *mut A, nelem: usize, stride: isize) -> StrideMut<'a, A>$/;"	f
from_seed	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn from_seed(seed: &'a [u8]) -> Fortuna {$/;"	f
from_slice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            pub fn from_slice(xs: $slice, step: isize) -> $name<'a, A>$/;"	f
from_slices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^    pub fn from_slices(a: T, b: U) -> Self {$/;"	f
from_str	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^    fn from_str(s: &str) -> Result<Self, Self::Err> {$/;"	f
from_stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            pub fn from_stride(mut it: $name<'a, A>, mut step: isize) -> $name<'a, A>$/;"	f
from_stride_empty	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/stride.rs	/^fn from_stride_empty()$/;"	f
from_string	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^   pub fn from_string(s: &str) -> Sha1Hash {$/;"	f
from_to_bytes_preserves	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn from_to_bytes_preserves() {$/;"	f
full_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn full_buffer<'s>(&'s mut self) -> &'s [u8] {$/;"	f
full_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn full_buffer<'s>(&'s mut self) -> &'s [u8];$/;"	f
fuzz_group_by_lazy_1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn fuzz_group_by_lazy_1(it: Iter<u8>) -> bool {$/;"	f
fuzz_group_by_lazy_2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn fuzz_group_by_lazy_2(data: Vec<u8>) -> bool {$/;"	f
fuzz_group_by_lazy_3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn fuzz_group_by_lazy_3(data: Vec<u8>) -> bool {$/;"	f
fuzz_group_by_lazy_duo	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn fuzz_group_by_lazy_duo(data: Vec<u8>, order: Vec<(bool, bool)>) -> bool {$/;"	f
g	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^        fn g(u: u32, v: u32, w: u32) -> u32 {$/;"	f
ge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn ge(&self, other: &Self) -> bool {$/;"	f
ge_scalarmult_base	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn ge_scalarmult_base(a: &[u8]) -> GeP3 {$/;"	f
generate_blocks	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn generate_blocks(&mut self, k: usize, out: &mut [u8]) {$/;"	f
generate_random_data	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn generate_random_data(&mut self, out: &mut [u8]) {$/;"	f
generating_key_from_string	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^    fn generating_key_from_string() {$/;"	f
get	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            pub fn get<'b>(&'b self, i: usize) -> Option<&'b A> {$/;"	f
get_cipher	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8] {$/;"	f
get_cipher	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_cipher<'a>(&'a self) -> &'a [u8];$/;"	f
get_mut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^    pub fn get_mut<'b>(&'b mut self, i: usize) -> Option<&'b mut A> {$/;"	f
get_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn get_next(&mut self) -> bool {$/;"	f
get_plain	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8] {$/;"	f
get_plain	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn get_plain<'a>(&'a self) -> &'a [u8];$/;"	f
get_test_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn get_test_vectors()-> [TestVector; 5]{$/;"	f
get_test_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn get_test_vectors()-> Vec<TestVector>{$/;"	f
get_unchecked	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    unsafe fn get_unchecked(&mut self, i: usize) -> &'a T {$/;"	f
get_unchecked	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut T {$/;"	f
get_unchecked	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item;$/;"	f
get_unchecked	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            unsafe fn get_unchecked(&mut self, i: usize) -> $elem {$/;"	f
get_unchecked	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item {$/;"	f
ghash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod ghash;$/;"	m
ghash_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_10(bh: & mut Bencher) {$/;"	f
ghash_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_1k(bh: & mut Bencher) {$/;"	f
ghash_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn ghash_64k(bh: & mut Bencher) {$/;"	f
group_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn group_by<K, F>(self, key: F) -> GroupBy<K, Self, F>$/;"	f
group_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn group_by() {$/;"	f
group_by_lazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn group_by_lazy<K, F>(self, key: F) -> GroupByLazy<K, Self, F>$/;"	f
group_by_lazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn group_by_lazy() {$/;"	f
group_by_lazy_1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn group_by_lazy_1(b: &mut test::Bencher) {$/;"	f
group_by_lazy_2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn group_by_lazy_2(b: &mut test::Bencher) {$/;"	f
group_by_lazy_2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn group_by_lazy_2() {$/;"	f
group_by_lazy_3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn group_by_lazy_3() {$/;"	f
group_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn group_key(&mut self, client: usize) -> K {$/;"	f
groupbylazy	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod groupbylazy;$/;"	m
gsm_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_10(bh: & mut Bencher) {$/;"	f
gsm_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_1k(bh: & mut Bencher) {$/;"	f
gsm_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn gsm_64k(bh: & mut Bencher) {$/;"	f
gt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn gt(&self, other: &Self) -> bool {$/;"	f
h	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^        fn h(u: u32, v: u32, w: u32) -> u32 {$/;"	f
has_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn has_next<R: ReadBuffer, W: WriteBuffer>($/;"	f
hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn hash() {$/;"	f
hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn hash(&mut self) {$/;"	f
hash	/home/cuervo/Desktop/repos/subotai/src/lib.rs	/^pub mod hash;$/;"	m
hc128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod hc128;$/;"	m
hc128_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_10(bh: & mut Bencher) {$/;"	f
hc128_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_1k(bh: & mut Bencher) {$/;"	f
hc128_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn hc128_64k(bh: & mut Bencher) {$/;"	f
hchacha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn hchacha20(&mut self, out: &mut [u8]) -> () {$/;"	f
heapify	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^fn heapify<T: Ord>(data: &mut [T]) {$/;"	f
height	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^   pub fn height(&self) -> Option<usize> {$/;"	f
hex_to_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    fn hex_to_bytes(raw_hex: &str) -> Vec<u8> {$/;"	f
hkdf	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod hkdf;$/;"	m
hkdf_expand	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hkdf.rs	/^pub fn hkdf_expand<D: Digest>(mut digest: D, prk: &[u8], info: &[u8], okm: &mut [u8]) {$/;"	f
hkdf_extract	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hkdf.rs	/^pub fn hkdf_extract<D: Digest>(mut digest: D, salt: &[u8], ikm: &[u8], prk: &mut [u8]) {$/;"	f
hmac	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod hmac;$/;"	m
hsalsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^pub fn hsalsa20(key: &[u8], nonce: &[u8], out: &mut [u8]) {$/;"	f
hsalsa20_hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn hsalsa20_hash(&mut self, out: &mut [u8]) {$/;"	f
i	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^        fn i(u: u32, v: u32, w: u32) -> u32 {$/;"	f
identity	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^        fn identity<T>(t: T) -> T {$/;"	f
impl_append_tuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^macro_rules! impl_append_tuple($/;"	d
impl_fixed_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^macro_rules! impl_fixed_buffer( ($name:ident, $size:expr) => ($/;"	d
impl_format	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^macro_rules! impl_format {$/;"	d
impl_zip_iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^macro_rules! impl_zip_iter {$/;"	d
impl_zip_trusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^macro_rules! impl_zip_trusted {$/;"	d
increment_counter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn increment_counter(&mut self, inc : u64) {$/;"	f
increment_counter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn increment_counter(&mut self, inc : u32) {$/;"	f
increment_counter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn increment_counter(&mut self) {$/;"	f
index	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn index<'b>(&'b self, _index: usize) -> &'b I::Item {$/;"	f
index	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            fn index<'b>(&'b self, i: usize) -> &'b A$/;"	f
index_mut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^    fn index_mut<'b>(&'b mut self, i: usize) -> &'b mut A {$/;"	f
init	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn init(&mut self, key : &[u8], nonce : &[u8]) {$/;"	f
init0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn init0(param: Blake2bParam, digest_length: u8, key: &[u8]) -> Blake2b {$/;"	f
init0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn init0(param: Blake2sParam, digest_length: u8, key: &[u8]) -> Blake2s {$/;"	f
init_param	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn init_param( p: Blake2bParam, key: &[u8] ) -> Blake2b {$/;"	f
init_param	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn init_param( p: Blake2sParam, key: &[u8] ) -> Blake2s {$/;"	f
init_state	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn init_state() -> Blowfish {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn input(&mut self, msg: &[u8]) { self.update(msg); }$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn input(&mut self, msg: &[u8]) { self.update(msg); }$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn input<F: FnMut(&[u8])>(&mut self, input: &[u8], mut func: F) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn input<F: FnMut(&[u8])>(&mut self, input: &[u8], func: F);$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^    fn input(&mut self, input: &[u8]);$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    fn input(&mut self, data: &[u8]);$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn input(&mut self, msg: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    fn input(&mut self, msg: &[u8]) { add_input(self, msg); }$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, d: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn input(&mut self, input: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn input(&mut self, data: &[u8]) {$/;"	f
input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn input(&mut self, source: &[u8]) {$/;"	f
input_a	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_a(mut self, a: &[u8]) -> Ghash {$/;"	f
input_c	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn input_c(mut self, c: &[u8]) -> GhashWithC {$/;"	f
input_str	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^    fn input_str(&mut self, input: &str) {$/;"	f
integerify	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    fn integerify(x: &[u8], n: usize) -> usize {$/;"	f
interleave	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn interleave<I, J>(i: I, j: J) -> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>$/;"	f
interleave	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn interleave<J>(self, other: J) -> Interleave<Self, J::IntoIter>$/;"	f
interleave	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn interleave() {$/;"	f
interleave_shortest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn interleave_shortest<J>(self, other: J) -> InterleaveShortest<Self, J::IntoIter>$/;"	f
interleave_shortest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn interleave_shortest() {$/;"	f
intersperse	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn intersperse(self, element: Self::Item) -> Intersperse<Self>$/;"	f
intersperse	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod intersperse;$/;"	m
intersperse	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn intersperse() {$/;"	f
into_iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	f
into_iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    fn into_iter(self) -> RcIter<I> {$/;"	f
into_iterator_tuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn into_iterator_tuple(self) -> Self::Output;$/;"	f
into_iterator_tuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^            fn into_iterator_tuple(self) -> Self::Output$/;"	f
into_option	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/minmax.rs	/^    pub fn into_option(self) -> Option<(T,T)> {$/;"	f
into_parts	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn into_parts(self) -> (Option<I::Item>, I) {$/;"	f
into_rc	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn into_rc(self) -> RcIter<Self>$/;"	f
into_read_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn into_read_buffer(self) -> OwnedReadBuffer {$/;"	f
into_write_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn into_write_buffer(self) -> OwnedWriteBuffer {$/;"	f
inv	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(&self) -> Bs8State<T> {$/;"	f
inv	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(&self) -> Self;$/;"	f
inv	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Bs2State<T> {$/;"	f
inv	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Bs4State<T> {$/;"	f
inv	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv(self) -> Self;$/;"	f
inv_mcol	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn inv_mcol(x: u32) -> u32 {$/;"	f
inv_mix_columns	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_mix_columns(self) -> Bs8State<T> {$/;"	f
inv_mix_columns	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_mix_columns(self) -> Self;$/;"	f
inv_shift_row	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> Self;$/;"	f
inv_shift_row	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> u16 {$/;"	f
inv_shift_row	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_row(self) -> u32x4 {$/;"	f
inv_shift_rows	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_rows(self) -> Bs8State<T> {$/;"	f
inv_shift_rows	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_shift_rows(self) -> Self;$/;"	f
inv_sub_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_sub_bytes(self) -> Bs8State<T> {$/;"	f
inv_sub_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn inv_sub_bytes(self) -> Self;$/;"	f
invert	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn invert(&self) -> Fe {$/;"	f
invert_inverts	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn invert_inverts() {$/;"	f
iproduct	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^macro_rules! iproduct {$/;"	d
is_done	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn is_done(&self) -> bool {$/;"	f
is_empty	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == 0 }$/;"	f
is_empty	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == self.buff.len() }$/;"	f
is_empty	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool { self.pos == self.len }$/;"	f
is_empty	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_empty(&self) -> bool;$/;"	f
is_empty_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn is_empty_hint(&self) -> Option<bool> {$/;"	f
is_full	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == 0 }$/;"	f
is_full	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool { self.pos == self.len }$/;"	f
is_full	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn is_full(&self) -> bool;$/;"	f
is_keccak	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn is_keccak(&self) -> bool {$/;"	f
is_negative	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn is_negative(&self) -> bool {$/;"	f
is_nonzero	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn is_nonzero(&self) -> bool {$/;"	f
is_shake	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn is_shake(&self) -> bool {$/;"	f
islice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod islice;$/;"	m
it_works	/home/cuervo/Desktop/repos/subotai/src/lib.rs	/^    fn it_works() {$/;"	f
iv_setup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^fn iv_setup(iv : &[u8], subkeys : &mut[u32; 100], lfsr : &mut[u32; 10], fsm_r : &mut[u32; 2]) {$/;"	f
izip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^macro_rules! izip {$/;"	d
izip3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn izip3() {$/;"	f
izip_macro	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn izip_macro() {$/;"	f
join	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn join<I>(iterable: I, sep: &str) -> String$/;"	f
join	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn join(&mut self, sep: &str) -> String$/;"	f
join	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn join() {$/;"	f
join	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn join(self, rhs: Bs2State<T>) -> Bs4State<T> {$/;"	f
join	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn join(self, rhs: Bs4State<T>) -> Bs8State<T> {$/;"	f
kademlia	/home/cuervo/Desktop/repos/subotai/src/lib.rs	/^pub mod kademlia;$/;"	m
keccak224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak224() -> Sha3 {$/;"	f
keccak256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak256() -> Sha3 {$/;"	f
keccak384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak384() -> Sha3 {$/;"	f
keccak512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn keccak512() -> Sha3 {$/;"	f
keccak_f	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^fn keccak_f(state: &mut [u8]) {$/;"	f
key_setup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^fn key_setup(key : &[u8], subkeys : &mut[u32; 100]) {$/;"	f
keypair	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn keypair(seed: &[u8]) -> ([u8; 64], [u8; 32]) {$/;"	f
keypair_cases	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^    fn keypair_cases() {$/;"	f
keypair_matches_mont	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^    fn keypair_matches_mont() {$/;"	f
kmerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn kmerge<I>(i: I) -> KMerge<<<I as IntoIterator>::Item as IntoIterator>::IntoIter>$/;"	f
kmerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn kmerge(self) -> KMerge<<<Self as Iterator>::Item as IntoIterator>::IntoIter> where$/;"	f
kmerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod kmerge;$/;"	m
kmerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn kmerge() {$/;"	f
kmerge_default	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn kmerge_default(b: &mut test::Bencher) {$/;"	f
kmerge_empty	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn kmerge_empty() {$/;"	f
kmerge_empty_size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn kmerge_empty_size_hint() {$/;"	f
kmerge_new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^pub fn kmerge_new<I>(iter: I) -> KMerge<<I::Item as IntoIterator>::IntoIter>$/;"	f
kmerge_size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn kmerge_size_hint() {$/;"	f
kmerge_tenway	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn kmerge_tenway(b: &mut test::Bencher) {$/;"	f
le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn le(&self, other: &Self) -> bool {$/;"	f
len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn len(&self) -> usize {$/;"	f
len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn len(&self) -> usize { (**self).len() }$/;"	f
len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn len(&self) -> usize;$/;"	f
len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            fn len(&self) -> usize { $name::len(self) }$/;"	f
len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            pub fn len(&self) -> usize {$/;"	f
len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^    fn len(&self) -> usize {$/;"	f
linspace	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod linspace;$/;"	m
linspace	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^pub fn linspace<F>(a: F, b: F, n: usize) -> Linspace<F>$/;"	f
linspace	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn linspace() {$/;"	f
load_3i	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_3i(s: &[u8]) -> i64 {$/;"	f
load_3u	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_3u(s: &[u8]) -> u64 {$/;"	f
load_4i	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_4i(s: &[u8]) -> i64 {$/;"	f
load_4u	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^fn load_4u(s: &[u8]) -> u64 {$/;"	f
lookup_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn lookup_buffer(&mut self, client: usize) -> Option<I::Item> {$/;"	f
lsh	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn lsh(self, s: u32) -> u32x4 {$/;"	f
lt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn lt(&self, other: &Self) -> bool {$/;"	f
mac	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod mac;$/;"	m
mac_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^mod mac_tests {$/;"	m
mac_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^mod mac_tests {$/;"	m
main	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/examples/iris.rs	/^fn main() {$/;"	f
main	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/build.rs	/^fn main() {$/;"	f
main	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/examples/symmetriccipher.rs	/^fn main() {$/;"	f
map_fn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn map_fn<B>(self, f: fn(Self::Item) -> B) -> MapFn<Self, B>$/;"	f
map_fn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn map_fn() {$/;"	f
mapper	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    fn mapper<T: ToString>(x: T) -> String { x.to_string() }$/;"	f
max	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn max<I>(iterable: I) -> Option<I::Item>$/;"	f
max	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/size_hint.rs	/^pub fn max(a: SizeHint, b: SizeHint) -> SizeHint {$/;"	f
maybe_set	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_set(&mut self, other: &Fe, do_swap: i32) {$/;"	f
maybe_set	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_set(&mut self, other: &GePrecomp, do_swap: i32) {$/;"	f
maybe_swap_with	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn maybe_swap_with(&mut self, other: &mut Fe, do_swap: i32) {$/;"	f
md5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod md5;$/;"	m
md5_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_10(bh: & mut Bencher) {$/;"	f
md5_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_1k(bh: & mut Bencher) {$/;"	f
md5_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    pub fn md5_64k(bh: & mut Bencher) {$/;"	f
mend	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn mend(Self, Self) -> Result<Self, (Self, Self)>$/;"	f
mend	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn mend(a: Self, b: Self) -> Result<Self, (Self, Self)> {$/;"	f
mend_slices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn mend_slices(self) -> MendSlices<Self>$/;"	f
mend_slices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn mend_slices() {$/;"	f
mend_slices_mut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn mend_slices_mut() {$/;"	f
merge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn merge<I, J>(i: I, j: J) -> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>$/;"	f
merge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn merge<J>(self, other: J) -> Merge<Self, J::IntoIter>$/;"	f
merge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn merge() {$/;"	f
merge_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn merge_by<J, F>(self, other: J, is_first: F) -> MergeBy<Self, J::IntoIter, F>$/;"	f
merge_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn merge_by() {$/;"	f
merge_by_btree	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn merge_by_btree() {$/;"	f
merge_by_cmp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn merge_by_cmp(b: &mut test::Bencher) {$/;"	f
merge_by_lt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn merge_by_lt(b: &mut test::Bencher) {$/;"	f
merge_by_new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub fn merge_by_new<I, J, F>(a: I, b: J, cmp: F) -> MergeBy<I, J, F>$/;"	f
merge_default	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn merge_default(b: &mut test::Bencher) {$/;"	f
merge_new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub fn merge_new<I, J>(a: I, b: J) -> Merge<I, J>$/;"	f
min	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn min<I>(iterable: I) -> Option<I::Item>$/;"	f
min	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/size_hint.rs	/^pub fn min(a: SizeHint, b: SizeHint) -> SizeHint {$/;"	f
minmax	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn minmax(self) -> MinMaxResult<Self::Item>$/;"	f
minmax	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod minmax;$/;"	m
minmax	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn minmax() {$/;"	f
minmax_by_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn minmax_by_key<K, F>(self, f: F) -> MinMaxResult<Self::Item>$/;"	f
minmax_impl	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/minmax.rs	/^pub fn minmax_impl<I: Itertools, K, F, L, G>(mut it: I, mut key_for: F,$/;"	f
misc	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub mod misc;$/;"	m
mix_columns	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mix_columns(self) -> Bs8State<T> {$/;"	f
mix_columns	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mix_columns(self) -> Self;$/;"	f
mk_result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^fn mk_result(st: &mut Sha1, rs: &mut [u8]) {$/;"	f
mul	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/size_hint.rs	/^pub fn mul(a: SizeHint, b: SizeHint) -> SizeHint {$/;"	f
mul	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Bs2State<T>) -> Bs2State<T> {$/;"	f
mul	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Bs4State<T>) -> Bs4State<T> {$/;"	f
mul	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn mul(self, y: Self) -> Self;$/;"	f
mul	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul(self, _rhs: Fe) -> Fe {$/;"	f
mul_121666	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_121666(&self) -> Fe {$/;"	f
mul_assoc	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_assoc() {$/;"	f
mul_commutes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn mul_commutes() {$/;"	f
mul_scalar	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/size_hint.rs	/^pub fn mul_scalar(sh: SizeHint, x: usize) -> SizeHint {$/;"	f
multipeek	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn multipeek(self) -> MultiPeek<Self>$/;"	f
multipeek	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn multipeek() {$/;"	f
mut_stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/stride.rs	/^fn mut_stride() {$/;"	f
mut_stride_compose	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/stride.rs	/^fn mut_stride_compose() {$/;"	f
neg	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn neg(&self) -> Fe {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(a: I, b: J) -> Interleave<I, J> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(a: I, b: J) -> InterleaveShortest<I, J> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(i: I, j: J) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(it: I) -> LazyBuffer<I> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(it: I) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: &'a mut I, f: F) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I) -> Combinations<I> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I) -> Flatten<I> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I) -> MultiPeek<I> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I, f: F) -> Batching<I, F> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I, f: F) -> UniqueBy<I, V, F> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I, key: F) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I, n: usize) -> CombinationsN<I> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I, start: K) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(iter: I, step: usize) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(mut iter: I) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn new(mut iter: I, f: F) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn new(size: usize) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^pub fn new<K, J, F>(iter: J, f: F) -> GroupByLazy<K, J::IntoIter, F>$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/intersperse.rs	/^    pub fn new(iter: I, elt: I::Item) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/islice.rs	/^    pub fn new<R: GenericRange>(iter: I, range: R) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn new(mut it: I) -> Option<HeadTail<I>> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    pub fn new(iter: I) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^    pub fn new(iter: I, min: usize, filler: F) -> PadUsing<I, F> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    pub fn new(iter: I) -> RcIter<I> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^    pub fn new(elt: A, n: usize) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^    pub fn new(initial_state: St, f: F) -> Unfold<St, F> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^    pub fn new<A>(func: F) -> Self$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/tee.rs	/^pub fn new<I>(iter: I) -> (Tee<I>, Tee<I>)$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_eq.rs	/^pub fn new<I, J>(a: I, b: J) -> ZipEq<I, J> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^    pub fn new(a: T, b: U) -> ZipLongest<T, U> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^    pub fn new(a: &'a [A], b: &'b [B]) -> Self {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^    pub fn new(t: T) -> ZipTrusted<T> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^    pub fn new(t: T) -> Zip<T::Output> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn new(it: Range<T>) -> Self$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    pub fn new(s: &'a str) -> Self$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^    pub fn new (key_size: KeySize, key: &[u8], nonce: &[u8], aad: &[u8]) -> AesGcm<'a> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    pub fn new(key_size: KeySize, key: &[u8]) -> AesNiDecryptor {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    pub fn new(key_size: KeySize, key: &[u8]) -> AesNiEncryptor {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^            pub fn new(key: &[u8]) -> $name {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn new(outlen: usize) -> Blake2b {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn new(outlen: usize) -> Blake2s {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn new(processor: P, padding: X, block_size: usize) -> BlockEngine<P, X> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: A, ctr: &[u8]) -> CtrModeX8<A> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: A, ctr: Vec<u8>) -> CtrMode<A> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X) -> EcbDecryptor<T, DecPadding<X>> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X) -> EcbEncryptor<T, EncPadding<X>> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X, iv: Vec<u8>) -> CbcDecryptor<T, DecPadding<X>> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn new(algo: T, padding: X, iv: Vec<u8>) -> CbcEncryptor<T, EncPadding<X>> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn new(key: &[u8]) -> Blowfish {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn new(parent: &mut OwnedReadBuffer) -> BorrowedWriteBuffer {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: &[u8]) -> RefReadBuffer {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: &mut [u8]) -> RefWriteBuffer {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: Vec<u8>) -> OwnedReadBuffer {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new(buff: Vec<u8>) -> OwnedWriteBuffer {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> ChaCha20 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  pub fn new(key: &[u8], nonce: &[u8], aad: &[u8]) -> ChaCha20Poly1305 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn new() -> FixedBuffer128 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn new() -> FixedBuffer64 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^        fn new(seed: u32) -> CurveGen {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn new() -> FortunaGenerator {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn new() -> Pool {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn new(a: u32, b: u32, c: u32, d: u32) -> Gf128 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn new(h: &[u8]) -> Ghash {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Hc128 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    pub fn new(mut digest: D, key: &[u8]) -> Hmac<D> {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    pub fn new(code: &[u8]) -> MacResult {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn new() -> Md5State {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    pub fn new() -> Md5 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn new(key: &[u8]) -> Poly1305 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn new(key: &[u8]) -> Rc4 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn new() -> Ripemd160 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Salsa20 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    pub fn new(log_n: u8, r: u32, p: u32) -> ScryptParams {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn new() -> Sha1 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn new(h: &[u32; STATE_LEN]) -> Engine256 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn new(h: &[u32; STATE_LEN]) -> Engine256State {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn new(h: &[u64; 8]) -> Engine512State {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn new(h: &[u64; STATE_LEN]) -> Engine512 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha224 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha256 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha384 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512Trunc224 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn new() -> Sha512Trunc256 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn new(mode: Sha3Mode) -> Sha3 {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn new(key: &[u8], nonce: &[u8]) -> Sosemanuk {$/;"	f
new	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    pub fn new() -> Whirlpool {$/;"	f
new	/home/cuervo/Desktop/repos/subotai/src/kademlia/node.rs	/^   pub fn new(port: u16) -> io::Result<Node> {$/;"	f
new	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^   pub fn new() -> Bucket {$/;"	f
new	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^   pub fn new(parent_key : &Sha1Hash) -> RoutingTable {$/;"	f
new_chunks	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^pub fn new_chunks<J>(iter: J, size: usize) -> ChunksLazy<J::IntoIter>$/;"	f
new_format	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^pub fn new_format<'a, I, F>(iter: I, separator: &'a str, f: F) -> Format<'a, I, F>$/;"	f
new_format_default	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/format.rs	/^pub fn new_format_default<'a, I>(iter: I, separator: &'a str) -> FormatDefault<'a, I>$/;"	f
new_from_owned	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    pub fn new_from_owned(code: Vec<u8>) -> MacResult {$/;"	f
new_keyed	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn new_keyed(outlen: usize, key: &[u8] ) -> Blake2b {$/;"	f
new_keyed	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn new_keyed(outlen: usize, key: &[u8] ) -> Blake2s {$/;"	f
new_routing_table_is_empty	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^    fn new_routing_table_is_empty() {$/;"	f
new_unseeded	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    pub fn new_unseeded() -> Fortuna {$/;"	f
new_with_history	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn new_with_history($/;"	f
new_with_len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    pub fn new_with_len<'a>(buff: Vec<u8>, len: usize) -> OwnedReadBuffer {$/;"	f
new_xchacha20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    pub fn new_xchacha20(key: &[u8], nonce: &[u8]) -> ChaCha20 {$/;"	f
new_xsalsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn new_xsalsa20(key: &[u8], nonce: &[u8]) -> Salsa20 {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next(&mut self) -> Option<(I::Item, J::Item)> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next(&mut self) -> Option<(K, I::Item)> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next(&mut self) -> Option<(K, Vec<I::Item>)> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next(&mut self) -> Option<A> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next(&mut self) -> Option<B> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next(&mut self) -> Option<I::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/intersperse.rs	/^    fn next(&mut self) -> Option<I::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/islice.rs	/^    fn next(&mut self) -> Option<I::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn next(&mut self) -> Option<I::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^    fn next(&mut self) -> Option<F> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^    fn next(&mut self) -> Option<I::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    fn next(&mut self) -> Option<A> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^    fn next(&mut self) -> Option<A> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            fn next(&mut self) -> Option<$elem>$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/tee.rs	/^    fn next(&mut self) -> Option<I::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_eq.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^            fn next(&mut self) -> Option<Self::Item>$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^            fn next(&mut self) -> Option<Self::Item>$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn next(&mut self) -> Option<Self::Item>$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^        fn next(&mut self) -> Option<X>$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^    fn next(&mut self) -> Option<Self::Item>$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn next<'s>(&'s mut self, len: usize) -> &'s mut [u8] {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn next<'s>(&'s mut self, len: usize) -> &'s mut [u8];$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^        fn next(&mut self) -> Option<Fe> {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn next(&mut self) -> u8 {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    fn next(&mut self) -> u8 {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn next(&mut self) -> u8 {$/;"	f
next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/step_by.rs	/^    fn next(&mut self) -> Option<T> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^    fn next_back(&mut self) -> Option<F> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^    fn next_back(&mut self) -> Option<I::Item> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    fn next_back(&mut self) -> Option<I::Item> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^    fn next_back(&mut self) -> Option<A> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            fn next_back(&mut self) -> Option<$elem>$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^    fn next_back(&mut self) -> Option<Self::Item> {$/;"	f
next_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn next_back(&mut self) -> Option<Self::Item> { self.0.next_back() }$/;"	f
next_element	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn next_element(&mut self) -> Option<I::Item> {$/;"	f
next_u32	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn next_u32(&mut self) -> u32 {$/;"	f
next_u32_wrap	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^fn next_u32_wrap(buf: &[u8], offset: &mut usize) -> u32 {$/;"	f
next_with	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next_with<F>(&mut self, mut f: F) -> Option<I::Item>$/;"	f
next_with	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn next_with<F>(&mut self, mut less_than: F) -> Option<I::Item>$/;"	f
node	/home/cuervo/Desktop/repos/subotai/src/kademlia/mod.rs	/^pub mod node;$/;"	m
node	/home/cuervo/Desktop/repos/subotai/src/lib.rs	/^pub mod node;$/;"	m
node::Node for Node	/home/cuervo/Desktop/repos/subotai/src/kademlia/node.rs	/^impl node::Node<Sha1Hash, Sha1Hash> for Node {$/;"	i
not	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn not(self) -> u32x4 {$/;"	f
op_f	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^        fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f
op_g	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^        fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f
op_h	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^        fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f
op_i	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^        fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, s: u32) -> u32 {$/;"	f
openwall_test_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt.rs	/^    fn openwall_test_vectors() -> Vec<Test> {$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn output_bits(&self) -> usize { 8 * (self.digest_length as usize) }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn output_bits(&self) -> usize { 8 * (self.digest_length as usize) }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^    fn output_bits(&self) -> usize;$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn output_bits(&self) -> usize { 128 }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn output_bits(&self) -> usize { 160 }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    fn output_bits(&self) -> usize { 160 }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 224 }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 256 }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 384 }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn output_bits(&self) -> usize { 512 }$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn output_bits(&self) -> usize {$/;"	f
output_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn output_bits(&self) -> usize {$/;"	f
output_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn output_bytes(&self) -> usize { self.digest_length as usize }$/;"	f
output_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn output_bytes(&self) -> usize { self.digest_length as usize }$/;"	f
output_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^    fn output_bytes(&self) -> usize {$/;"	f
output_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn output_bytes(&self) -> usize { 16 }$/;"	f
output_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    fn output_bytes(&self) -> usize { self.digest.output_bytes() }$/;"	f
output_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    fn output_bytes(&self) -> usize;$/;"	f
output_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn output_bytes(&self) -> usize { 16 }$/;"	f
pad_input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, _: &mut W) { }$/;"	f
pad_input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, a: &mut W) { self.padding.pad_input(a); }$/;"	f
pad_input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, input_buffer: &mut W) {$/;"	f
pad_input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn pad_input<W: WriteBuffer>(&mut self, input_buffer: &mut W);$/;"	f
pad_len	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^        fn pad_len(ds_len: usize, offset: usize, rate: usize) -> usize {$/;"	f
pad_tail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod pad_tail;$/;"	m
pad_using	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn pad_using<F>(self, min: usize, f: F) -> PadUsing<Self, F>$/;"	f
pad_using	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn pad_using() {$/;"	f
part	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn part() {$/;"	f
partial_cmp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {$/;"	f
partial_cmp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^        fn partial_cmp(&self, other: &Val) -> Option<Ordering> {$/;"	f
partition	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub fn partition<'a, A: 'a, I, F>(iter: I, mut pred: F) -> usize$/;"	f
partition_map	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn partition_map<A, B, F, L, R>(self, predicate: F) -> (A, B)$/;"	f
pb	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn pb(x: u16, bit: u32, shift: u32) -> u32 {$/;"	f
pb	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn pb(x: u32, bit: u32, shift: u32) -> u16 {$/;"	f
pbkdf2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod pbkdf2;$/;"	m
pbkdf2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2<M: Mac>(mac: &mut M, salt: &[u8], c: u32, output: &mut [u8]) {$/;"	f
pbkdf2_check	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2_check(password: &str, hashed_value: &str) -> Result<bool, &'static str> {$/;"	f
pbkdf2_simple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^pub fn pbkdf2_simple(password: &str, c: u32) -> io::Result<String> {$/;"	f
peek	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn peek(&mut self) -> Option<&I::Item> {$/;"	f
peek_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8] { &self.buff[self.pos..count] }$/;"	f
peek_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_next(&self, count: usize) -> &[u8];$/;"	f
peek_read_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer {$/;"	f
peek_read_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer(&mut self) -> RefReadBuffer;$/;"	f
peek_read_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_read_buffer<'a>(&'a mut self) -> RefReadBuffer<'a> {$/;"	f
peek_remaining	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn peek_remaining(&self) -> &[u8] {$/;"	f
poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod poly1305;$/;"	m
poly1305	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn poly1305(key: &[u8], msg: &[u8], mac: &mut [u8]) {$/;"	f
poly1305_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_10(bh: & mut Bencher) {$/;"	f
poly1305_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_1k(bh: & mut Bencher) {$/;"	f
poly1305_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    pub fn poly1305_64k(bh: & mut Bencher) {$/;"	f
position	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn position(&self) -> usize { self.capacity() - self.remaining() }$/;"	f
position	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn position(&self) -> usize { self.buffer_idx }$/;"	f
position	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn position(&self) -> usize;$/;"	f
pow25523	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn pow25523(&self) -> Fe {$/;"	f
prepare_columnround	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! prepare_columnround {$/;"	d
prepare_rowround	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^macro_rules! prepare_rowround {$/;"	d
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	f
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process<R: ReadBuffer, W: WriteBuffer>($/;"	f
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	f
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	f
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	f
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	f
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	f
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]) {$/;"	f
process	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/symmetriccipher.rs	/^    fn process(&mut self, input: &[u8], output: &mut [u8]);$/;"	f
process_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	f
process_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, _: &[u8], out_hist: &[u8], input: &[u8], output: &mut [u8]) {$/;"	f
process_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, in_hist: &[u8], _: &[u8], input: &[u8], output: &mut [u8]) {$/;"	f
process_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn process_block(&mut self, in_hist: &[u8], out_hist: &[u8], input: &[u8], output: &mut [u8]);$/;"	f
process_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn process_block(&mut self, input: &[u8]) {$/;"	f
process_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^macro_rules! process_block($/;"	d
process_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn process_block(&mut self, data: &[u8]) {$/;"	f
process_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^fn process_buffer(hash: &mut[u64; 8], buffer: &[u8]) {$/;"	f
process_msg_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^fn process_msg_block(data: &[u8], h: &mut [u32; DIGEST_BUF_LEN]) {$/;"	f
process_scratch	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn process_scratch<P: BlockProcessor, X: PaddingProcessor>(me: &mut BlockEngine<P, X>) {$/;"	f
product2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn product2() {$/;"	f
product3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn product3() {$/;"	f
product_temporary	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn product_temporary() {$/;"	f
prop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^                fn prop($($arg)*) -> $ret {$/;"	f
push_next_group	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn push_next_group(&mut self, group: Vec<I::Item>) {$/;"	f
push_to	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn push_to<W: WriteBuffer>(&mut self, output: &mut W) {$/;"	f
put_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn put_back(&mut self, x: I::Item) {$/;"	f
put_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn put_back() {$/;"	f
put_back_n	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn put_back_n() {$/;"	f
qc::Arbitrary for Iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^impl<T> qc::Arbitrary for Iter<T> where T: qc::Arbitrary$/;"	i
quickcheck	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^macro_rules! quickcheck {$/;"	d
rate	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn rate(&self) -> usize {$/;"	f
raw_result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	f
raw_result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	f
raw_result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	f
raw_result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	f
raw_result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    fn raw_result(&mut self, output: &mut [u8]);$/;"	f
raw_result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn raw_result(&mut self, output: &mut [u8]) {$/;"	f
rc4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod rc4;$/;"	m
rc4_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_10(bh: & mut Bencher) {$/;"	f
rc4_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_1k(bh: & mut Bencher) {$/;"	f
rc4_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    pub fn rc4_64k(bh: & mut Bencher) {$/;"	f
rciter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod rciter;$/;"	m
rciter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn rciter() {$/;"	f
read_row_major	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn read_row_major(data: &[u8]) -> u32x4 {$/;"	f
read_u32_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32_be(input: &[u8]) -> u32 {$/;"	f
read_u32_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32_le(input: &[u8]) -> u32 {$/;"	f
read_u32v_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32v_be(dst: &mut[u32], input: &[u8]) {$/;"	f
read_u32v_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u32v_le(dst: &mut[u32], input: &[u8]) {$/;"	f
read_u64v_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u64v_be(dst: &mut[u64], input: &[u8]) {$/;"	f
read_u64v_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn read_u64v_le(dst: &mut[u64], input: &[u8]) {$/;"	f
remaining	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.buff.len() - self.pos }$/;"	f
remaining	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize { self.len - self.pos }$/;"	f
remaining	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn remaining(&self) -> usize;$/;"	f
remaining	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn remaining(&self) -> usize { $size - self.buffer_idx }$/;"	f
remaining	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn remaining(&self) -> usize;$/;"	f
repeatn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod repeatn;$/;"	m
repeatn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn repeatn() {$/;"	f
reseed	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn reseed(&mut self, s: &[u8]) {$/;"	f
reseed	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn reseed(&mut self, seed: &'a [u8]) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn reset(&mut self) { Blake2b::reset(self); }$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    pub fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn reset(&mut self) { Blake2s::reset(self); }$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    pub fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, ctr: &[u8]) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    pub fn reset(&mut self, iv: &[u8]) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) { self.pos = 0; }$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn reset(&mut self);$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn reset(&mut self);$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^    fn reset(&mut self);$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    fn reset(&mut self);$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self, h: &[u32; STATE_LEN]) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn reset(&mut self, h: &[u64; STATE_LEN]) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn reset(&mut self) {$/;"	f
reset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn reset(&mut self) {$/;"	f
reset_with_history	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn reset_with_history(&mut self, in_hist: &[u8], out_hist: &[u8]) {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn result(&mut self) -> MacResult {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn result(&mut self, out: &mut [u8]) { self.finalize(out); }$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn result(&mut self) -> MacResult {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn result(&mut self, out: &mut [u8]) { self.finalize(out); }$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^    fn result(&mut self, out: &mut [u8]);$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn result(&mut self, output: &mut [u8]) {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn result(&mut self) -> MacResult {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    pub fn result(mut self) -> [u8; 16] {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    fn result(&mut self) -> MacResult {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/mac.rs	/^    fn result(&mut self) -> MacResult;$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn result(&mut self) -> MacResult {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    fn result(&mut self, out: &mut [u8]) { mk_result(self, out) }$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	f
result	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn result(&mut self, out: &mut [u8]) {$/;"	f
result_str	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/digest.rs	/^    fn result_str(&mut self) -> String {$/;"	f
rev	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn rev<I>(iterable: I) -> iter::Rev<I::IntoIter>$/;"	f
rewind	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) { self.pos -= distance; }$/;"	f
rewind	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize) {$/;"	f
rewind	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn rewind(&mut self, distance: usize);$/;"	f
ripemd160	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod ripemd160;$/;"	m
ripemd160_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_10(bh: & mut Bencher) {$/;"	f
ripemd160_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_1k(bh: & mut Bencher) {$/;"	f
ripemd160_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    pub fn ripemd160_64k(bh: & mut Bencher) {$/;"	f
rng	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^    fn rng(state: &mut u16) -> u16 {$/;"	f
ror1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> Self;$/;"	f
ror1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> u16 {$/;"	f
ror1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror1(self) -> u32x4 {$/;"	f
ror2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> Self;$/;"	f
ror2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> u16 {$/;"	f
ror2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror2(self) -> u32x4 {$/;"	f
ror3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> Self;$/;"	f
ror3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> u16 {$/;"	f
ror3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn ror3(self) -> u32x4 {$/;"	f
rotate	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! rotate {$/;"	d
rotl64	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^fn rotl64(v: u64, n: usize) -> u64 {$/;"	f
round	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^macro_rules! round( ($r:expr, $v:expr, $m:expr) => ( {$/;"	d
round	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^macro_rules! round( ($r:expr, $v:expr, $m:expr) => ( {$/;"	d
round	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! round{$/;"	d
round	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^macro_rules! round($/;"	d
round_function	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    fn round_function(&self, x: u32) -> u32 {$/;"	f
rounds4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! rounds4 {$/;"	d
rounds4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! rounds4 {$/;"	d
rowround	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^fn rowround(state: &mut SalsaState) -> () {$/;"	f
rpc	/home/cuervo/Desktop/repos/subotai/src/kademlia/mod.rs	/^pub mod rpc;$/;"	m
rsh	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn rsh(self, s: u32) -> u32x4 {$/;"	f
run_full_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_full_test<T: CipherTest, E: Encryptor, D: Decryptor>($/;"	f
run_inc	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_inc<OpFunc, NextInFunc, NextOutFunc>($/;"	f
run_inc1_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_inc1_test<T: CipherTest, E: Encryptor, D: Decryptor>($/;"	f
run_rand_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_rand_test<T, E, D, NewEncFunc, NewDecFunc>($/;"	f
run_round	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    macro_rules! run_round ($/;"	d
run_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn run_test<E: BlockEncryptor, D: BlockDecryptor>(enc: &mut E, dec: &mut D, test: &Test) {$/;"	f
run_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn run_test<T, E, D, NewEncFunc, NewDecFunc>($/;"	f
rust_crypto_aesni_aesimc	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_aesimc(round_keys: *mut u8);$/;"	f
rust_crypto_aesni_decrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_decrypt_block($/;"	f
rust_crypto_aesni_encrypt_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_encrypt_block($/;"	f
rust_crypto_aesni_setup_working_key_128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_128(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_aesni_setup_working_key_192	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_192(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_aesni_setup_working_key_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^    fn rust_crypto_aesni_setup_working_key_256(key: *const u8, round_key: *mut u8);$/;"	f
rust_crypto_util_fixed_time_eq_asm	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_fixed_time_eq_asm($/;"	f
rust_crypto_util_secure_memset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_secure_memset($/;"	f
rust_crypto_util_supports_aesni	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/util.rs	/^    pub fn rust_crypto_util_supports_aesni() -> u32;$/;"	f
salsa20	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod salsa20;$/;"	m
salsa20_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_10(bh: & mut Bencher) {$/;"	f
salsa20_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_1k(bh: & mut Bencher) {$/;"	f
salsa20_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    pub fn salsa20_64k(bh: & mut Bencher) {$/;"	f
salsa20_8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^fn salsa20_8(input: &[u8], output: &mut [u8]) {$/;"	f
salted_expand_key	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^    pub fn salted_expand_key(&mut self, salt: &[u8], key: &[u8]) {$/;"	f
sc_muladd	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn sc_muladd(s: &mut[u8], a: &[u8], b: &[u8], c: &[u8]) {$/;"	f
sc_reduce	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^pub fn sc_reduce(s: &mut [u8]) {$/;"	f
schedule	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    macro_rules! schedule {$/;"	d
schedule	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! schedule {$/;"	d
scl_n	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n(self) -> Bs2State<T> {$/;"	f
scl_n	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n(self) -> Self;$/;"	f
scl_n2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n2(self) -> Bs2State<T> {$/;"	f
scl_n2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn scl_n2(self) -> Self;$/;"	f
scrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod scrypt;$/;"	m
scrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt(password: &[u8], salt: &[u8], params: &ScryptParams, output: &mut [u8]) {$/;"	f
scrypt_block_mix	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^fn scrypt_block_mix(input: &[u8], output: &mut [u8]) {$/;"	f
scrypt_check	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt_check(password: &str, hashed_value: &str) -> Result<bool, &'static str> {$/;"	f
scrypt_ro_mix	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^fn scrypt_ro_mix(b: &mut [u8], v: &mut [u8], t: &mut [u8], n: usize) {$/;"	f
scrypt_simple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^pub fn scrypt_simple(password: &str, params: &ScryptParams) -> io::Result<String> {$/;"	f
secure_memset	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/util.rs	/^pub fn secure_memset(dst: &mut [u8], val: u8) {$/;"	f
select	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn select(pos: usize, b: i8) -> GePrecomp {$/;"	f
set_domain_sep	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^        fn set_domain_sep(out_len: usize, buf: &mut [u8]) {$/;"	f
set_from	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn set_from<'a, A: 'a, J>(&mut self, from: J) -> usize$/;"	f
set_lastblock	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn set_lastblock(&mut self) {$/;"	f
set_lastblock	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn set_lastblock(&mut self) {$/;"	f
set_lastnode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn set_lastnode(&mut self) {$/;"	f
set_lastnode	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn set_lastnode(&mut self) {$/;"	f
set_length	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^            fn set_length(&mut self)$/;"	f
set_length	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^    fn set_length(&mut self);$/;"	f
set_pad	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^        fn set_pad(offset: usize, buf: &mut [u8]) {$/;"	f
setup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt.rs	/^fn setup(cost: u32, salt: &[u8], key: &[u8]) -> Blowfish {$/;"	f
setup_working_key_aesni_128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_128(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
setup_working_key_aesni_192	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_192(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
setup_working_key_aesni_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^fn setup_working_key_aesni_256(key: &[u8], key_type: KeyType, round_key: &mut [u8]) {$/;"	f
sha1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha1;$/;"	m
sha1_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_10(bh: & mut Bencher) {$/;"	f
sha1_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_1k(bh: & mut Bencher) {$/;"	f
sha1_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_64k(bh: & mut Bencher) {$/;"	f
sha1_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    pub fn sha1_block(bh: & mut Bencher) {$/;"	f
sha1_digest_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_digest_block(state: &mut [u32; 5], block: &[u8\/*; 64*\/]) {$/;"	f
sha1_digest_block_u32	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_digest_block_u32(state: &mut [u32; 5], block: &[u32; 16]) {$/;"	f
sha1_digest_round_x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_digest_round_x4(abcd: u32x4, work: u32x4, i: i8) -> u32x4 {$/;"	f
sha1_first	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first(w0: u32x4) -> u32 {$/;"	f
sha1_first_add	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first_add(e: u32, w0: u32x4) -> u32x4 {$/;"	f
sha1_first_half	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_first_half(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1_schedule_x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^pub fn sha1_schedule_x4(v0: u32x4, v1: u32x4, v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha1msg1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1msg1(a: u32x4, b: u32x4) -> u32x4 {$/;"	f
sha1msg2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1msg2(a: u32x4, b: u32x4) -> u32x4 {$/;"	f
sha1rnds4c	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4c(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1rnds4m	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4m(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha1rnds4p	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^fn sha1rnds4p(abcd: u32x4, msg: u32x4) -> u32x4 {$/;"	f
sha2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha2;$/;"	m
sha256_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_10(bh: & mut Bencher) {$/;"	f
sha256_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_1k(bh: & mut Bencher) {$/;"	f
sha256_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_64k(bh: & mut Bencher) {$/;"	f
sha256_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha256_block(bh: & mut Bencher) {$/;"	f
sha256_digest_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_digest_block(state: &mut [u32; 8], block: &[u8\/*; 64*\/]) {$/;"	f
sha256_digest_block_u32	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_digest_block_u32(state: &mut [u32; 8], block: &[u32; 16]) {$/;"	f
sha256_digest_round_x2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_digest_round_x2(cdgh: u32x4, abef: u32x4, wk: u32x4) -> u32x4 {$/;"	f
sha256_schedule_x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha256_schedule_x4(v0: u32x4, v1: u32x4, v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256load	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256load(v2: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256msg1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256msg1(v0: u32x4, v1: u32x4) -> u32x4 {$/;"	f
sha256msg2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256msg2(v4: u32x4, v3: u32x4) -> u32x4 {$/;"	f
sha256swap	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^fn sha256swap(v0: u32x4) -> u32x4 {$/;"	f
sha3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod sha3;$/;"	m
sha3_224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_224() -> Sha3 {$/;"	f
sha3_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_256() -> Sha3 {$/;"	f
sha3_384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_384() -> Sha3 {$/;"	f
sha3_512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn sha3_512() -> Sha3 {$/;"	f
sha512_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_10(bh: & mut Bencher) {$/;"	f
sha512_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_1k(bh: & mut Bencher) {$/;"	f
sha512_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_64k(bh: & mut Bencher) {$/;"	f
sha512_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    pub fn sha512_block(bh: & mut Bencher) {$/;"	f
sha512_digest_block	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_digest_block(state: &mut [u64; 8], block: &[u8\/*; 128*\/]) {$/;"	f
sha512_digest_block_u64	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_digest_block_u64(state: &mut [u64; 8], block: &[u64; 16]) {$/;"	f
sha512_digest_round	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_digest_round(ae: u64x2, bf: u64x2, cg: u64x2, dh: u64x2, wk0: u64) -> u64x2 {$/;"	f
sha512_schedule_x2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^pub fn sha512_schedule_x2(v0: u64x2, v1: u64x2, v4to5: u64x2, v7: u64x2) -> u64x2 {$/;"	f
sha512load	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^fn sha512load(v0: u64x2, v1: u64x2) -> u64x2 {$/;"	f
shake_128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn shake_128() -> Sha3 {$/;"	f
shake_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    pub fn shake_256() -> Sha3 {$/;"	f
shift_row	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> Self;$/;"	f
shift_row	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> u16 {$/;"	f
shift_row	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_row(self) -> u32x4 {$/;"	f
shift_rows	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_rows(self) -> Bs8State<T> {$/;"	f
shift_rows	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn shift_rows(self) -> Self;$/;"	f
shl	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn shl(self, amt: usize) -> u32x4 {$/;"	f
shl	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn shl(self, rhs: u32x4) -> u32x4 {$/;"	f
shr	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn shr(self, amt: usize) -> u32x4 {$/;"	f
shr	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn shr(self, rhs: u32x4) -> u32x4 {$/;"	f
shrink	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn shrink(&self) -> Box<Iterator<Item=Iter<T>>>$/;"	f
sift_down	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^fn sift_down<T: Ord>(heap: &mut [T], index: usize) {$/;"	f
sigma0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma0(x: u64) -> u64 {$/;"	f
sigma0x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma0x4(x: u32x4) -> u32x4 {$/;"	f
sigma1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn sigma1(x: u64) -> u64 {$/;"	f
sigma1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    macro_rules! sigma1 {$/;"	d
sign_verify_cases	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^    fn sign_verify_cases() {$/;"	f
signature	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn signature(message: &[u8], secret_key: &[u8]) -> [u8; 64] {$/;"	f
simd	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^mod simd;$/;"	m
simd_eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    fn simd_eq(self, rhs: Self) -> Self {$/;"	f
simd_eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    fn simd_eq(self, rhs: Self) -> Self;$/;"	f
size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aesni.rs	/^fn size(rounds: u8) -> usize { 16 * ((rounds as usize) + 1) }$/;"	f
size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn size(&self) -> usize { $size }$/;"	f
size	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn size(&self) -> usize;$/;"	f
size_2_zip_longest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_2_zip_longest(a: Iter<i16>, b: Iter<i16>) -> bool {$/;"	f
size_combinations	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_combinations(it: Iter<i16>) -> bool {$/;"	f
size_dedup	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_dedup(a: Vec<i32>) -> bool {$/;"	f
size_group_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_group_by(a: Vec<i8>) -> bool {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/intersperse.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/islice.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/kmerge.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^pub mod size_hint;$/;"	m
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/linspace.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/pad_tail.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/rciter.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/repeatn.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/sources.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/tee.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_eq.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zip_longest.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/zipslices.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptrusted.rs	/^            fn size_hint(&self) -> (usize, Option<usize>)$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/ziptuple.rs	/^            fn size_hint(&self) -> (usize, Option<usize>)$/;"	f
size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_hint(&self) -> (usize, Option<usize>)$/;"	f
size_interleave	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_interleave(a: Iter<i16>, b: Iter<i16>) -> bool {$/;"	f
size_interleave_shortest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_interleave_shortest(a: Iter<i16>, b: Iter<i16>) -> bool {$/;"	f
size_intersperse	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_intersperse(a: Iter<i16>, x: i16) -> bool {$/;"	f
size_islice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_islice(a: Iter<i16>, x: usize, y: usize) -> bool {$/;"	f
size_kmerge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_kmerge(a: Iter<i16>, b: Iter<i16>, c: Iter<i16>) -> bool {$/;"	f
size_linspace	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_linspace(a: f32, b: f32, n: usize) -> bool {$/;"	f
size_mend_slices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_mend_slices(a: Vec<u8>, splits: Vec<usize>) -> bool {$/;"	f
size_merge	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_merge(a: Iter<u16>, b: Iter<u16>) -> bool {$/;"	f
size_multipeek	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_multipeek(a: Iter<u16>, s: u8) -> bool {$/;"	f
size_pad_tail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_pad_tail(it: Iter<i8>, pad: u8) -> bool {$/;"	f
size_pad_tail2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_pad_tail2(it: Iter<i8>, pad: u8) -> bool {$/;"	f
size_product	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_product(a: Iter<u16>, b: Iter<u16>) -> bool {$/;"	f
size_product3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_product3(a: Iter<u16>, b: Iter<u16>, c: Iter<u16>) -> bool {$/;"	f
size_put_back	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_put_back(a: Vec<u8>, x: Option<u8>) -> bool {$/;"	f
size_put_backn	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_put_backn(a: Vec<u8>, b: Vec<u8>) -> bool {$/;"	f
size_range_i16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^fn size_range_i16(a: Iter<i16>) -> bool {$/;"	f
size_range_i8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^fn size_range_i8(a: Iter<i8>) -> bool {$/;"	f
size_range_u8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^fn size_range_u8(a: Iter<u8>) -> bool {$/;"	f
size_step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_step(a: Iter<i16>, s: usize) -> bool {$/;"	f
size_stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_stride(data: Vec<u8>, mut stride: isize) -> bool {$/;"	f
size_take_while_ref	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_take_while_ref(a: Vec<u8>, stop: u8) -> bool {$/;"	f
size_tee	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_tee(a: Vec<u8>) -> bool {$/;"	f
size_tee_2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_tee_2(a: Vec<u8>) -> bool {$/;"	f
size_unique	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_unique(it: Iter<i8>) -> bool {$/;"	f
size_zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_zip(a: Iter<i16>, b: Iter<i16>, c: Iter<i16>) -> bool {$/;"	f
size_zip_longest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_zip_longest(a: Iter<i16>, b: Iter<i16>) -> bool {$/;"	f
size_zip_rc	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_zip_rc(a: Iter<i16>, b: Iter<i16>) -> bool {$/;"	f
size_ziptrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_ziptrusted(a: Vec<u8>, b: Vec<u8>) -> bool {$/;"	f
size_ziptrusted3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_ziptrusted3(a: Vec<u8>, b: Vec<u8>, c: Vec<u8>) -> bool {$/;"	f
size_ziptrusted_mix	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/quick.rs	/^    fn size_ziptrusted_mix(a: Vec<u8>, b: Vec<()>, x: u8, y: u8) -> bool {$/;"	f
slice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn slice<R>(self, range: R) -> ISlice<Self>$/;"	f
slice	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn slice() {$/;"	f
slice_chunks	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn slice_chunks(b: &mut test::Bencher) {$/;"	f
slice_iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn slice_iter(b: &mut test::Bencher)$/;"	f
slice_iter_rev	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn slice_iter_rev(b: &mut test::Bencher)$/;"	f
slide	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn slide(a: &[u8]) -> [i8; 256] {$/;"	f
sort_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn sort_by<F>(self, cmp: F) -> Vec<Self::Item>$/;"	f
sorted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn sorted<I>(iterable: I) -> Vec<I::Item>$/;"	f
sorted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn sorted(self) -> Vec<Self::Item>$/;"	f
sorted_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn sorted_by<F>(self, cmp: F) -> Vec<Self::Item>$/;"	f
sorted_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn sorted_by() {$/;"	f
sosemanuk	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod sosemanuk;$/;"	m
sosemanuk_10	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_10(bh: & mut Bencher) {$/;"	f
sosemanuk_1k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_1k(bh: & mut Bencher) {$/;"	f
sosemanuk_64k	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    pub fn sosemanuk_64k(bh: & mut Bencher) {$/;"	f
sources	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod sources;$/;"	m
specific_node	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^   fn specific_node(&self, key : &Sha1Hash) -> Option<NodeInfo> {$/;"	f
split	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (Bs2State<T>, Bs2State<T>) {$/;"	f
split	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (Bs4State<T>, Bs4State<T>) {$/;"	f
split	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn split(self) -> (T, T) {$/;"	f
split_at	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^        fn split_at<'a>(vec: &'a [u8], at: usize) -> (&'a [u8], &'a [u8]) {$/;"	f
split_input	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn split_input() {$/;"	f
sq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq(self) -> Bs2State<T> {$/;"	f
sq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq(self) -> Self;$/;"	f
sq_scl	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq_scl(self) -> Bs4State<T> {$/;"	f
sq_scl	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sq_scl(self) -> Self;$/;"	f
square	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square(&self) -> Fe {$/;"	f
square_and_double	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square_and_double(&self) -> Fe {$/;"	f
square_by_mul	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn square_by_mul() {$/;"	f
standard_padding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn standard_padding<F: FnMut(&[u8])>(&mut self, rem: usize, func: F);$/;"	f
standard_padding	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn standard_padding<F: FnMut(&[u8])>(&mut self, rem: usize, mut func: F) {$/;"	f
start	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn start(&self) -> Option<usize> {$/;"	f
state_to_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! state_to_buffer {$/;"	d
step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn step(&mut self, client: usize) -> Option<I::Item> {$/;"	f
step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn step(&self, client: usize) -> Option<I::Item> {$/;"	f
step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn step(&self, client: usize) -> Option<I::Item>$/;"	f
step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn step(self, n: usize) -> Step<Self>$/;"	f
step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn step() {$/;"	f
step	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn step(&mut self) -> u32 {$/;"	f
step_buffering	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn step_buffering(&mut self, client: usize) -> Option<I::Item> {$/;"	f
step_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^mod step_by;$/;"	m
step_current	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/groupbylazy.rs	/^    fn step_current(&mut self) -> Option<I::Item> {$/;"	f
step_up	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/step_by.rs	/^    fn step_up(self, ammount: T) -> StepUp<T> {$/;"	f
step_up	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/step_by.rs	/^    fn step_up(self, ammount: T) -> StepUp<T>;$/;"	f
stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod stride;$/;"	m
stride	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/stride.rs	/^fn stride() {$/;"	f
stride_compose	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/stride.rs	/^fn stride_compose() {$/;"	f
stride_impl	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^macro_rules! stride_impl {$/;"	d
stride_index	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/stride.rs	/^fn stride_index() {$/;"	f
stride_index_fail	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/stride.rs	/^fn stride_index_fail() {$/;"	f
stride_iter	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn stride_iter(b: &mut test::Bencher)$/;"	f
stride_iter_rev	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn stride_iter_rev(b: &mut test::Bencher)$/;"	f
stride_uneven	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/stride.rs	/^fn stride_uneven() {$/;"	f
strip_output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, _: &mut R) -> bool { true }$/;"	f
strip_output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, a: &mut R) -> bool { self.padding.strip_output(a) }$/;"	f
strip_output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, output_buffer: &mut R) -> bool {$/;"	f
strip_output	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn strip_output<R: ReadBuffer>(&mut self, output_buffer: &mut R) -> bool;$/;"	f
sub	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: Fe) -> Fe {$/;"	f
sub	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: GeCached) -> GeP1P1 {$/;"	f
sub	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn sub(self, _rhs: GePrecomp) -> GeP1P1 {$/;"	f
sub	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^        fn sub(self, rhs: u32x4) -> u32x4 {$/;"	f
sub_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sub_bytes(self) -> Bs8State<T> {$/;"	f
sub_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn sub_bytes(self) -> Self;$/;"	f
sub_scalar	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/size_hint.rs	/^pub fn sub_scalar(sh: SizeHint, x: usize) -> SizeHint {$/;"	f
sub_word	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn sub_word(x: u32) -> u32 {$/;"	f
supports_aesni	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/util.rs	/^pub fn supports_aesni() -> bool {$/;"	f
swap_ends	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/stride.rs	/^            pub fn swap_ends(&mut self) {$/;"	f
swap_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn swap_test() {$/;"	f
swizzle	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^macro_rules! swizzle{$/;"	d
symm_enc_or_dec	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn symm_enc_or_dec<S: SynchronousStreamCipher, R: ReadBuffer, W: WriteBuffer>($/;"	f
symmetriccipher	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod symmetriccipher;$/;"	m
table	/home/cuervo/Desktop/repos/subotai/src/kademlia/mod.rs	/^pub mod table;$/;"	m
take_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8] {$/;"	f
take_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &[u8];$/;"	f
take_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &mut [u8] {$/;"	f
take_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next(&mut self, count: usize) -> &mut [u8];$/;"	f
take_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next<'a>(&'a mut self, count: usize) -> &'a mut [u8] {$/;"	f
take_next	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_next<>(&mut self, count: usize) -> &mut [u8] {$/;"	f
take_read_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer {$/;"	f
take_read_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer(&mut self) -> RefReadBuffer;$/;"	f
take_read_buffer	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_read_buffer<'a>(&'a mut self) -> RefReadBuffer<'a> {$/;"	f
take_remaining	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_remaining(&mut self) -> &[u8] {$/;"	f
take_remaining	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn take_remaining(&mut self) -> &mut [u8] {$/;"	f
take_while_ref	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn take_while_ref<'a, F>(&'a mut self, f: F) -> TakeWhileRef<'a, Self, F>$/;"	f
tee	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn tee(self) -> (Tee<Self>, Tee<Self>)$/;"	f
tee	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod tee;$/;"	m
tee	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn tee() {$/;"	f
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes_gcm.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blowfish.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hkdf.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn test() {$/;"	f
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    fn test() {$/;"	f
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/util.rs	/^mod test {$/;"	m
test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^mod test {$/;"	m
test_1million_random_md5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn test_1million_random_md5() {$/;"	f
test_1million_random_ripemd160	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^    fn test_1million_random_ripemd160() {$/;"	f
test_1million_random_sha1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^    fn test_1million_random_sha1() {$/;"	f
test_1million_random_sha256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_1million_random_sha256() {$/;"	f
test_1million_random_sha512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_1million_random_sha512() {$/;"	f
test_accumulator_correctness	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_accumulator_correctness() {$/;"	f
test_add_bytes_to_bits_ok	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_ok() {$/;"	f
test_add_bytes_to_bits_overflow	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_overflow() {$/;"	f
test_add_bytes_to_bits_tuple_ok	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok() {$/;"	f
test_add_bytes_to_bits_tuple_ok2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok2() {$/;"	f
test_add_bytes_to_bits_tuple_ok3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_ok3() {$/;"	f
test_add_bytes_to_bits_tuple_overflow	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_overflow() {$/;"	f
test_add_bytes_to_bits_tuple_overflow2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn test_add_bytes_to_bits_tuple_overflow2() {$/;"	f
test_aesni_128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_128() {$/;"	f
test_aesni_192	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_192() {$/;"	f
test_aesni_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aesni_256() {$/;"	f
test_aessafe_128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_128() {$/;"	f
test_aessafe_128_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_128_x8() {$/;"	f
test_aessafe_192	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_192() {$/;"	f
test_aessafe_192_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_192_x8() {$/;"	f
test_aessafe_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_256() {$/;"	f
test_aessafe_256_x8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn test_aessafe_256_x8() {$/;"	f
test_badly_seeded	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_badly_seeded() {$/;"	f
test_bcrypt_hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn test_bcrypt_hash() {$/;"	f
test_blake2b_digest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_blake2b_digest() {$/;"	f
test_blake2b_mac	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_blake2b_mac() {$/;"	f
test_blake2s_digest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_blake2s_digest() {$/;"	f
test_blake2s_mac	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_blake2s_mac() {$/;"	f
test_chacha20_256_poly1305_boringssl_vectors_decrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn test_chacha20_256_poly1305_boringssl_vectors_decrypt() {$/;"	f
test_chacha20_256_poly1305_boringssl_vectors_encrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20poly1305.rs	/^  fn test_chacha20_256_poly1305_boringssl_vectors_encrypt() {$/;"	f
test_chacha20_256_tls_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_chacha20_256_tls_vectors() {$/;"	f
test_chacha20_256_tls_vectors_96_nonce	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_chacha20_256_tls_vectors_96_nonce() {$/;"	f
test_create_unseeded	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_create_unseeded() {$/;"	f
test_digest_1million_random	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    pub fn test_digest_1million_random<D: Digest>(digest: &mut D, blocksize: usize, expected: &str) {$/;"	f
test_double_ended_zip_longest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/zip.rs	/^fn test_double_ended_zip_longest() {$/;"	f
test_fixed_time_eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/util.rs	/^    pub fn test_fixed_time_eq() {$/;"	f
test_force_reseed	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^fn test_force_reseed(f: &mut Fortuna) {$/;"	f
test_generator_correctness	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_generator_correctness() {$/;"	f
test_hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn test_hash(tests: &[Test]) {$/;"	f
test_hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn test_hash(tests: &[Test]) {$/;"	f
test_hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f
test_hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f
test_hash	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) {$/;"	f
test_hc128_ecrypt_set_2_vector_0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_2_vector_0() {$/;"	f
test_hc128_ecrypt_set_6_vector_1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_1() {$/;"	f
test_hc128_ecrypt_set_6_vector_2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_2() {$/;"	f
test_hc128_ecrypt_set_6_vector_3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hc128.rs	/^    fn test_hc128_ecrypt_set_6_vector_3() {$/;"	f
test_hkdf_rfc5869_sha1_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hkdf.rs	/^    fn test_hkdf_rfc5869_sha1_vectors() {$/;"	f
test_hkdf_rfc5869_sha256_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hkdf.rs	/^    fn test_hkdf_rfc5869_sha256_vectors() {$/;"	f
test_hmac_md5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    fn test_hmac_md5() {$/;"	f
test_hmac_md5_incremental	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    fn test_hmac_md5_incremental() {$/;"	f
test_keccak_224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_224() {$/;"	f
test_keccak_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_256() {$/;"	f
test_keccak_384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_384() {$/;"	f
test_keccak_512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_keccak_512() {$/;"	f
test_md5	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^    fn test_md5() {$/;"	f
test_nacl_vector	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn test_nacl_vector() {$/;"	f
test_openbsd_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs	/^    fn test_openbsd_vectors() {$/;"	f
test_openwall_test_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/bcrypt.rs	/^    fn test_openwall_test_vectors() {$/;"	f
test_pbkdf2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn test_pbkdf2() {$/;"	f
test_pbkdf2_simple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn test_pbkdf2_simple() {$/;"	f
test_salsa20_128bit_ecrypt_set_1_vector_0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_128bit_ecrypt_set_1_vector_0() {$/;"	f
test_salsa20_256bit_ecrypt_set_1_vector_0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_256bit_ecrypt_set_1_vector_0() {$/;"	f
test_salsa20_256bit_nacl_vector_2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_salsa20_256bit_nacl_vector_2() {$/;"	f
test_scrypt	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt() {$/;"	f
test_scrypt_simple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple(log_n: u8, r: u32, p: u32) {$/;"	f
test_scrypt_simple_compact	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple_compact() {$/;"	f
test_scrypt_simple_expanded	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    fn test_scrypt_simple_expanded() {$/;"	f
test_seeded	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_seeded() {$/;"	f
test_sha224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha224() {$/;"	f
test_sha256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha256() {$/;"	f
test_sha384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha384() {$/;"	f
test_sha3_224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_224() {$/;"	f
test_sha3_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_256() {$/;"	f
test_sha3_384	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_384() {$/;"	f
test_sha3_512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_512() {$/;"	f
test_sha3_shake128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_shake128() {$/;"	f
test_sha3_shake256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^    fn test_sha3_shake256() {$/;"	f
test_sha512	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512() {$/;"	f
test_sha512_224	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512_224() {$/;"	f
test_sha512_256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^    fn test_sha512_256() {$/;"	f
test_sosemanuk_ecrypt_set_1_vector_0	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_1_vector_0() {$/;"	f
test_sosemanuk_ecrypt_set_2_vector_63	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_2_vector_63() {$/;"	f
test_sosemanuk_ecrypt_set_2_vector_90	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_2_vector_90() {$/;"	f
test_sosemanuk_ecrypt_set_3_vector_135	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_3_vector_135() {$/;"	f
test_sosemanuk_ecrypt_set_3_vector_207	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_3_vector_207() {$/;"	f
test_sosemanuk_ecrypt_set_6_vector_3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_ecrypt_set_6_vector_3() {$/;"	f
test_sosemanuk_vector128_test1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_vector128_test1() {$/;"	f
test_sosemanuk_vector128_test2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sosemanuk.rs	/^    fn test_sosemanuk_vector128_test2() {$/;"	f
test_tls_vectors	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/poly1305.rs	/^    fn test_tls_vectors() {$/;"	f
test_too_big_event	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_too_big_event() {$/;"	f
test_use_unseeded	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^    fn test_use_unseeded() {$/;"	f
test_xchacha20_basic	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn test_xchacha20_basic() {$/;"	f
test_xsalsa20_cryptopp	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/salsa20.rs	/^    fn test_xsalsa20_cryptopp() {$/;"	f
test_zip_longest_size_hint	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/zip.rs	/^fn test_zip_longest_size_hint() {$/;"	f
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^mod tests {$/;"	m
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^mod tests {$/;"	m
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/fortuna.rs	/^mod tests {$/;"	m
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/hmac.rs	/^    fn tests() -> Vec<Test> {$/;"	f
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/md5.rs	/^mod tests {$/;"	m
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/pbkdf2.rs	/^    fn tests() -> Vec<Test> {$/;"	f
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    fn tests() -> Vec<Test> {$/;"	f
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ripemd160.rs	/^mod tests {$/;"	m
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^    fn tests() -> Vec<Test> {$/;"	f
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha1.rs	/^mod tests {$/;"	m
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha2.rs	/^mod tests {$/;"	m
tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/sha3.rs	/^mod tests {$/;"	m
tests	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^mod tests {$/;"	m
tests	/home/cuervo/Desktop/repos/subotai/src/kademlia/node.rs	/^mod tests {$/;"	m
tests	/home/cuervo/Desktop/repos/subotai/src/kademlia/table.rs	/^mod tests {$/;"	m
tests	/home/cuervo/Desktop/repos/subotai/src/lib.rs	/^mod tests {$/;"	m
tests128	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn tests128() -> Vec<Test> {$/;"	f
tests192	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn tests192() -> Vec<Test> {$/;"	f
tests256	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aes.rs	/^    fn tests256() -> Vec<Test> {$/;"	f
times_x	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn times_x(self) -> Gf128 {$/;"	f
times_x_reduce	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn times_x_reduce(self) -> Gf128 {$/;"	f
to	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^trait to perform its operations.$/;"	t
to_bits	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^fn to_bits(x: u64) -> (u64, u64) {$/;"	f
to_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    pub fn to_bytes(&self) -> [u8; 32] {$/;"	f
to_bytes	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^    fn to_bytes(&self) -> [u8; 16] {$/;"	f
to_cached	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_cached(&self) -> GeCached {$/;"	f
to_float	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn to_float(self) -> F;$/;"	f
to_float	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn to_float(self) -> f32 {$/;"	f
to_float	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/misc.rs	/^    fn to_float(self) -> f64 {$/;"	f
to_p2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p2(&self) -> GeP2 {$/;"	f
to_p3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn to_p3(&self) -> GeP3 {$/;"	f
to_string	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^   pub fn to_string(&self) -> String {$/;"	f
trait_pointers	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn trait_pointers() {$/;"	f
truncate	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize) { self.len -= amount; }$/;"	f
truncate	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize) {$/;"	f
truncate	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/buffer.rs	/^    fn truncate(&mut self, amount: usize);$/;"	f
u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^impl u32x4 {$/;"	i
u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    pub struct u32x4(pub u32, pub u32, pub u32, pub u32);$/;"	s
u64x2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/simd.rs	/^    pub struct u64x2(pub u64, pub u64);$/;"	s
un_bit_slice_1x128_with_u32x4	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_1x128_with_u32x4(bs: Bs8State<u32x4>, output: &mut [u8]) {$/;"	f
un_bit_slice_1x16_with_u16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_1x16_with_u16(bs: &Bs8State<u16>, output: &mut [u8]) {$/;"	f
un_bit_slice_4x1_with_u16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_4x1_with_u16(bs: &Bs8State<u16>) -> u32 {$/;"	f
un_bit_slice_4x4_with_u16	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^fn un_bit_slice_4x4_with_u16(bs: &Bs8State<u16>) -> (u32, u32, u32, u32) {$/;"	f
unique	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^pub fn unique<I>(iter: I) -> Unique<I>$/;"	f
unique	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn unique(self) -> Unique<Self>$/;"	f
unique	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn unique() {$/;"	f
unique_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn unique_by<V, F>(self, f: F) -> UniqueBy<Self, V, F>$/;"	f
unique_by	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn unique_by() {$/;"	f
update	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2b.rs	/^    fn update( &mut self, mut input: &[u8] ) {$/;"	f
update	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blake2s.rs	/^    fn update( &mut self, mut input: &[u8] ) {$/;"	f
update	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/chacha20.rs	/^    fn update(&mut self) {$/;"	f
update	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ghash.rs	/^fn update(state: &mut Gf128, len: &mut usize, data: &[u8], srest: &mut Option<[u8; 16]>,$/;"	f
update_history	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^fn update_history(in_hist: &mut [u8], out_hist: &mut [u8], last_in: &[u8], last_out: &[u8]) {$/;"	f
util	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod util;$/;"	m
verify	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/ed25519.rs	/^pub fn verify(message: &[u8], public_key: &[u8], signature: &[u8]) -> bool {$/;"	f
while_some	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn while_some<A>(self) -> WhileSome<Self>$/;"	f
while_some	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn while_some() {$/;"	f
whirlpool	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/lib.rs	/^pub mod whirlpool;$/;"	m
whirlpool_1000000a_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn whirlpool_1000000a_test() {$/;"	f
whirlpool_static_test	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/whirlpool.rs	/^    fn whirlpool_static_test() {$/;"	f
wikipedia_tests	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/rc4.rs	/^    fn wikipedia_tests() {$/;"	f
with_value	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/adaptors.rs	/^    pub fn with_value(value: I::Item, it: I) -> Self {$/;"	f
wrap	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn wrap(p: X) -> DecPadding<X> { DecPadding { padding: p } }$/;"	f
wrap	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/blockmodes.rs	/^    fn wrap(p: X) -> EncPadding<X> { EncPadding { padding: p } }$/;"	f
write_row_major	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn write_row_major(block: u32x4, output: &mut [u8]) {$/;"	f
write_to	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/tests.rs	/^fn write_to() {$/;"	f
write_u32_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_be(&mut self, val: u32) -> io::Result<()> {$/;"	f
write_u32_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_be(&mut self, val: u32) -> io::Result<()>;$/;"	f
write_u32_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32_be(dst: &mut [u8], mut input: u32) {$/;"	f
write_u32_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_le(&mut self, val: u32) -> io::Result<()> {$/;"	f
write_u32_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u32_le(&mut self, val: u32) -> io::Result<()>;$/;"	f
write_u32_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32_le(dst: &mut[u8], mut input: u32) {$/;"	f
write_u32v_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u32v_le (dst: &mut[u8], input: &[u32]) {$/;"	f
write_u64_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_be(&mut self, val: u64) -> io::Result<()> {$/;"	f
write_u64_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_be(&mut self, val: u64) -> io::Result<()>;$/;"	f
write_u64_be	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64_be(dst: &mut[u8], mut input: u64) {$/;"	f
write_u64_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_le(&mut self, val: u64) -> io::Result<()> {$/;"	f
write_u64_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u64_le(&mut self, val: u64) -> io::Result<()>;$/;"	f
write_u64_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64_le(dst: &mut[u8], mut input: u64) {$/;"	f
write_u64v_le	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn write_u64v_le(dst: &mut[u8], input: &[u64]) {$/;"	f
write_u8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u8(&mut self, val: u8) -> io::Result<()> {$/;"	f
write_u8	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn write_u8(&mut self, val: u8) -> io::Result<()>;$/;"	f
xor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs2State<T>) -> Bs2State<T> {$/;"	f
xor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs4State<T>) -> Bs4State<T> {$/;"	f
xor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor(self, rhs: Bs8State<T>) -> Bs8State<T> {$/;"	f
xor	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/scrypt.rs	/^fn xor(x: &[u8], y: &[u8], output: &mut [u8]) {$/;"	f
xor_distance	/home/cuervo/Desktop/repos/subotai/src/hash/mod.rs	/^   pub fn xor_distance(hash_alpha : &Self, hash_beta : &Self) -> Sha1Hash {$/;"	f
xor_keystream	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn xor_keystream(dst: &mut[u8], plaintext: &[u8], keystream: &[u8]) {$/;"	f
xor_x63	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/aessafe.rs	/^    fn xor_x63(self) -> Bs8State<T> {$/;"	f
zero	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^pub fn zero(dst: &mut [u8]) {$/;"	f
zero	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GeP2 {$/;"	f
zero	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GeP3 {$/;"	f
zero	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/curve25519.rs	/^    fn zero() -> GePrecomp {$/;"	f
zero_until	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^        fn zero_until(&mut self, idx: usize) {$/;"	f
zero_until	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/rust-crypto-0.2.36/src/cryptoutil.rs	/^    fn zero_until(&mut self, idx: usize);$/;"	f
zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn zip<I, J>(i: I, j: J) -> Zip<I::IntoIter, J::IntoIter>$/;"	f
zip_checked_counted_loop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zip_checked_counted_loop(b: &mut test::Bencher)$/;"	f
zip_default_zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zip_default_zip(b: &mut test::Bencher)$/;"	f
zip_default_zip3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zip_default_zip3(b: &mut test::Bencher)$/;"	f
zip_eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/free.rs	/^pub fn zip_eq<I, J>(i: I, j: J) -> ZipEq<I::IntoIter, J::IntoIter>$/;"	f
zip_eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn zip_eq<J>(self, other: J) -> ZipEq<Self, J::IntoIter>$/;"	f
zip_eq	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod zip_eq;$/;"	m
zip_eq_panic1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/zip.rs	/^fn zip_eq_panic1()$/;"	f
zip_eq_panic2	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/zip.rs	/^fn zip_eq_panic2()$/;"	f
zip_longest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^    fn zip_longest<J>(self, other: J) -> ZipLongest<Self, J::IntoIter>$/;"	f
zip_longest	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod zip_longest;$/;"	m
zip_longest_fused	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/zip.rs	/^fn zip_longest_fused()$/;"	f
zip_slices_ziptuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zip_slices_ziptuple(b: &mut test::Bencher)$/;"	f
zip_unchecked_counted_loop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zip_unchecked_counted_loop(b: &mut test::Bencher)$/;"	f
zip_unchecked_counted_loop3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zip_unchecked_counted_loop3(b: &mut test::Bencher)$/;"	f
zipdot_f32_checked_counted_loop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_f32_checked_counted_loop(b: &mut test::Bencher)$/;"	f
zipdot_f32_checked_counted_unrolled_loop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_f32_checked_counted_unrolled_loop(b: &mut test::Bencher)$/;"	f
zipdot_f32_default_zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_f32_default_zip(b: &mut test::Bencher)$/;"	f
zipdot_f32_unchecked_counted_loop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_f32_unchecked_counted_loop(b: &mut test::Bencher)$/;"	f
zipdot_f32_zipslices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_f32_zipslices(b: &mut test::Bencher)$/;"	f
zipdot_f32_ziptrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_f32_ziptrusted(b: &mut test::Bencher)$/;"	f
zipdot_i32_checked_counted_loop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_i32_checked_counted_loop(b: &mut test::Bencher)$/;"	f
zipdot_i32_default_zip	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_i32_default_zip(b: &mut test::Bencher)$/;"	f
zipdot_i32_unchecked_counted_loop	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_i32_unchecked_counted_loop(b: &mut test::Bencher)$/;"	f
zipdot_i32_zipslices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_i32_zipslices(b: &mut test::Bencher)$/;"	f
zipdot_i32_ziptrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipdot_i32_ziptrusted(b: &mut test::Bencher)$/;"	f
zipslices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipslices(b: &mut test::Bencher)$/;"	f
zipslices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod zipslices;$/;"	m
zipslices	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/zip.rs	/^fn zipslices() {$/;"	f
zipslices_mut	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn zipslices_mut(b: &mut test::Bencher)$/;"	f
ziptrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn ziptrusted(b: &mut test::Bencher)$/;"	f
ziptrusted	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod ziptrusted;$/;"	m
ziptrusted3	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/benches/bench1.rs	/^fn ziptrusted3(b: &mut test::Bencher)$/;"	f
ziptrusted_1	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/tests/zip.rs	/^fn ziptrusted_1() {$/;"	f
ziptuple	/home/cuervo/.cargo/registry/src/github.com-88ac128001ac3a9a/itertools-0.4.15/src/lib.rs	/^mod ziptuple;$/;"	m
